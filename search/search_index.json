{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion is a fundamental topic in mechanics that offers a clean yet rich context for understanding the application of differential equations, Newton's laws, and kinematic principles. The central goal is to investigate how the horizontal range of a projectile depends on the angle of launch. Though the setup appears straightforward, the analysis reveals intricate dependencies on initial conditions and physical parameters. Understanding projectile motion is essential in a variety of fields\u2014from sports and civil engineering to space science and military applications. By starting from first principles and layering in simulation, this project provides both theoretical insight and computational practice. 1. Theoretical Foundation: Differential Equations Assumptions: The motion is in two dimensions. Air resistance is neglected. Gravity acts uniformly downward. Launch and landing heights are equal. We begin with Newton's second law: \\(\\vec{F} = m\\vec{a} \\Rightarrow \\frac{d^2 \\vec{r}}{dt^2} = \\vec{a}\\) Decomposing motion into x (horizontal) and y (vertical) directions: Horizontal Motion: \\(\\frac{d^2x}{dt^2} = 0 \\Rightarrow \\frac{dx}{dt} = v_0 \\cos(\\theta) \\Rightarrow x(t) = v_0 \\cos(\\theta) t\\) Vertical Motion: \\(\\frac{d^2y}{dt^2} = -g \\Rightarrow \\frac{dy}{dt} = v_0 \\sin(\\theta) - gt \\Rightarrow y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2\\) Time of Flight: Set \\(y(t) = 0\\) to find when the projectile lands: \\(t = \\frac{2v_0 \\sin(\\theta)}{g}\\) Horizontal Range: \\(R = v_0 \\cos(\\theta) \\cdot \\frac{2v_0 \\sin(\\theta)}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) This is the key result showing how range depends on initial velocity, gravity, and angle. 2. Simulation: Python Code and Visualizations Range vs. Angle Plot import numpy as np import matplotlib.pyplot as plt v0 = 30 # initial velocity in m/s g = 9.81 # gravitational acceleration in m/s^2 angles = np.linspace(0, 90, 500) angles_rad = np.radians(angles) # Calculate range R = (v0**2 * np.sin(2 * angles_rad)) / g # Plot range vs angle plt.figure(figsize=(10, 6)) plt.plot(angles, R, color='royalblue') plt.axvline(45, color='red', linestyle='--', label='\\u03b8 = 45\\xb0 (Max Range)') plt.title('Projectile Range vs. Launch Angle') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show() Output: Visit: Colab Multiple Trajectories for Different Angles # Time vector angles_deg = [15, 30, 45, 60, 75] colors = ['blue', 'green', 'orange', 'purple', 'brown'] plt.figure(figsize=(10, 6)) for angle, color in zip(angles_deg, colors): theta = np.radians(angle) t_flight = 2 * v0 * np.sin(theta) / g t_vals = np.linspace(0, t_flight, 300) x = v0 * np.cos(theta) * t_vals y = v0 * np.sin(theta) * t_vals - 0.5 * g * t_vals**2 plt.plot(x, y, label=f\"{angle}\u00b0\", color=color) plt.title(\"Projectile Trajectories for Different Angles\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.show() Output: Visit: Colab Animated Projectile Motion import matplotlib.animation as animation fig, ax = plt.subplots(figsize=(8, 5)) angle = np.radians(45) t_flight = 2 * v0 * np.sin(angle) / g t_vals = np.linspace(0, t_flight, 300) x_vals = v0 * np.cos(angle) * t_vals y_vals = v0 * np.sin(angle) * t_vals - 0.5 * g * t_vals**2 line, = ax.plot([], [], 'bo') ax.set_xlim(0, max(x_vals)) ax.set_ylim(0, max(y_vals)*1.1) ax.set_xlabel('Horizontal Distance (m)') ax.set_ylabel('Vertical Height (m)') ax.set_title('Animated Projectile Motion') # Initialization function def init(): line.set_data([], []) return line, # Animation function def animate(i): line.set_data(x_vals[i], y_vals[i]) return line, ani = animation.FuncAnimation(fig, animate, frames=len(t_vals), init_func=init, interval=20, blit=True) plt.show() Visit: Colab Range vs. Angle for Different Velocities velocities = [10, 20, 30, 40] plt.figure(figsize=(10, 6)) for v in velocities: R = (v**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, R, label=f'v\u2080 = {v} m/s') plt.title('Range vs. Angle for Various Initial Velocities') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.legend() plt.grid(True) plt.show() Visit Colab Output: Curves rising in height as initial velocity increases, but always peaking at 45\u00b0. 3. Practical Applications Sports : Optimize kicking or throwing angles. Engineering : Design water fountains, civil projectiles, or robotic arm paths. Aerospace : Launch trajectories under different gravitational conditions. Defense : Missile and artillery trajectory planning. 4. Extensions and Real-World Models Air Resistance Introducing drag results in non-linear differential equations. For example: \\(m \\frac{d^2x}{dt^2} = -kv_x, \\quad m \\frac{d^2y}{dt^2} = -mg - kv_y\\) where \\(k\\) is the drag coefficient. This requires numerical solving methods (like Runge-Kutta) for simulation. Python Simulation with Air Resistance (Euler Method) def simulate_drag(v0, theta_deg, dt=0.01, k=0.1): theta = np.radians(theta_deg) vx, vy = v0 * np.cos(theta), v0 * np.sin(theta) x, y = 0, 0 positions_x, positions_y = [x], [y] while y >= 0: ax = -k * vx ay = -g - k * vy vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt positions_x.append(x) positions_y.append(y) return positions_x, positions_y plt.figure(figsize=(10, 6)) for angle in [30, 45, 60]: x_vals, y_vals = simulate_drag(30, angle) plt.plot(x_vals, y_vals, label=f\"With drag, {angle}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.title(\"Projectile Motion with Air Resistance\") plt.legend() plt.grid(True) plt.show() Visit Colab Uneven Terrain and Variable Gravity Other extensions include: - Launching from/landing on slopes (geometry needed) - Varying \\(g\\) with altitude or planetary conditions Conclusion Starting from Newton's laws, we built a full mathematical model of projectile motion using differential equations. We derived the range formula and implemented visual simulations to understand how the angle of projection affects range. The model, while idealized, provides deep insight and serves as a powerful foundation for more complex analyses. With Python, we've created tools to simulate, visualize, and animate this system dynamically. Extensions include modeling drag and simulating on non-flat terrains\u2014perfect for bridging theory and real-world applications.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion is a fundamental topic in mechanics that offers a clean yet rich context for understanding the application of differential equations, Newton's laws, and kinematic principles. The central goal is to investigate how the horizontal range of a projectile depends on the angle of launch. Though the setup appears straightforward, the analysis reveals intricate dependencies on initial conditions and physical parameters. Understanding projectile motion is essential in a variety of fields\u2014from sports and civil engineering to space science and military applications. By starting from first principles and layering in simulation, this project provides both theoretical insight and computational practice.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation-differential-equations","text":"","title":"1. Theoretical Foundation: Differential Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#assumptions","text":"The motion is in two dimensions. Air resistance is neglected. Gravity acts uniformly downward. Launch and landing heights are equal. We begin with Newton's second law: \\(\\vec{F} = m\\vec{a} \\Rightarrow \\frac{d^2 \\vec{r}}{dt^2} = \\vec{a}\\) Decomposing motion into x (horizontal) and y (vertical) directions:","title":"Assumptions:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"\\(\\frac{d^2x}{dt^2} = 0 \\Rightarrow \\frac{dx}{dt} = v_0 \\cos(\\theta) \\Rightarrow x(t) = v_0 \\cos(\\theta) t\\)","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"\\(\\frac{d^2y}{dt^2} = -g \\Rightarrow \\frac{dy}{dt} = v_0 \\sin(\\theta) - gt \\Rightarrow y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2\\)","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"Set \\(y(t) = 0\\) to find when the projectile lands: \\(t = \\frac{2v_0 \\sin(\\theta)}{g}\\)","title":"Time of Flight:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-range","text":"\\(R = v_0 \\cos(\\theta) \\cdot \\frac{2v_0 \\sin(\\theta)}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) This is the key result showing how range depends on initial velocity, gravity, and angle.","title":"Horizontal Range:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-simulation-python-code-and-visualizations","text":"","title":"2. Simulation: Python Code and Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-vs-angle-plot","text":"import numpy as np import matplotlib.pyplot as plt v0 = 30 # initial velocity in m/s g = 9.81 # gravitational acceleration in m/s^2 angles = np.linspace(0, 90, 500) angles_rad = np.radians(angles) # Calculate range R = (v0**2 * np.sin(2 * angles_rad)) / g # Plot range vs angle plt.figure(figsize=(10, 6)) plt.plot(angles, R, color='royalblue') plt.axvline(45, color='red', linestyle='--', label='\\u03b8 = 45\\xb0 (Max Range)') plt.title('Projectile Range vs. Launch Angle') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Range vs. Angle Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output","text":"Visit: Colab","title":"Output:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#multiple-trajectories-for-different-angles","text":"# Time vector angles_deg = [15, 30, 45, 60, 75] colors = ['blue', 'green', 'orange', 'purple', 'brown'] plt.figure(figsize=(10, 6)) for angle, color in zip(angles_deg, colors): theta = np.radians(angle) t_flight = 2 * v0 * np.sin(theta) / g t_vals = np.linspace(0, t_flight, 300) x = v0 * np.cos(theta) * t_vals y = v0 * np.sin(theta) * t_vals - 0.5 * g * t_vals**2 plt.plot(x, y, label=f\"{angle}\u00b0\", color=color) plt.title(\"Projectile Trajectories for Different Angles\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.show()","title":"Multiple Trajectories for Different Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output_1","text":"Visit: Colab","title":"Output:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#animated-projectile-motion","text":"import matplotlib.animation as animation fig, ax = plt.subplots(figsize=(8, 5)) angle = np.radians(45) t_flight = 2 * v0 * np.sin(angle) / g t_vals = np.linspace(0, t_flight, 300) x_vals = v0 * np.cos(angle) * t_vals y_vals = v0 * np.sin(angle) * t_vals - 0.5 * g * t_vals**2 line, = ax.plot([], [], 'bo') ax.set_xlim(0, max(x_vals)) ax.set_ylim(0, max(y_vals)*1.1) ax.set_xlabel('Horizontal Distance (m)') ax.set_ylabel('Vertical Height (m)') ax.set_title('Animated Projectile Motion') # Initialization function def init(): line.set_data([], []) return line, # Animation function def animate(i): line.set_data(x_vals[i], y_vals[i]) return line, ani = animation.FuncAnimation(fig, animate, frames=len(t_vals), init_func=init, interval=20, blit=True) plt.show()","title":"Animated Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#visitcolab","text":"","title":"Visit:Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-vs-angle-for-different-velocities","text":"velocities = [10, 20, 30, 40] plt.figure(figsize=(10, 6)) for v in velocities: R = (v**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, R, label=f'v\u2080 = {v} m/s') plt.title('Range vs. Angle for Various Initial Velocities') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.legend() plt.grid(True) plt.show() Visit Colab","title":"Range vs. Angle for Different Velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output_2","text":"Curves rising in height as initial velocity increases, but always peaking at 45\u00b0.","title":"Output:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Optimize kicking or throwing angles. Engineering : Design water fountains, civil projectiles, or robotic arm paths. Aerospace : Launch trajectories under different gravitational conditions. Defense : Missile and artillery trajectory planning.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-extensions-and-real-world-models","text":"","title":"4. Extensions and Real-World Models"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#air-resistance","text":"Introducing drag results in non-linear differential equations. For example: \\(m \\frac{d^2x}{dt^2} = -kv_x, \\quad m \\frac{d^2y}{dt^2} = -mg - kv_y\\) where \\(k\\) is the drag coefficient. This requires numerical solving methods (like Runge-Kutta) for simulation.","title":"Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-simulation-with-air-resistance-euler-method","text":"def simulate_drag(v0, theta_deg, dt=0.01, k=0.1): theta = np.radians(theta_deg) vx, vy = v0 * np.cos(theta), v0 * np.sin(theta) x, y = 0, 0 positions_x, positions_y = [x], [y] while y >= 0: ax = -k * vx ay = -g - k * vy vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt positions_x.append(x) positions_y.append(y) return positions_x, positions_y plt.figure(figsize=(10, 6)) for angle in [30, 45, 60]: x_vals, y_vals = simulate_drag(30, angle) plt.plot(x_vals, y_vals, label=f\"With drag, {angle}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.title(\"Projectile Motion with Air Resistance\") plt.legend() plt.grid(True) plt.show() Visit Colab","title":"Python Simulation with Air Resistance (Euler Method)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#uneven-terrain-and-variable-gravity","text":"Other extensions include: - Launching from/landing on slopes (geometry needed) - Varying \\(g\\) with altitude or planetary conditions","title":"Uneven Terrain and Variable Gravity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"Starting from Newton's laws, we built a full mathematical model of projectile motion using differential equations. We derived the range formula and implemented visual simulations to understand how the angle of projection affects range. The model, while idealized, provides deep insight and serves as a powerful foundation for more complex analyses. With Python, we've created tools to simulate, visualize, and animate this system dynamically. Extensions include modeling drag and simulating on non-flat terrains\u2014perfect for bridging theory and real-world applications.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The pendulum is a powerful model in physics. From simple harmonic motion to chaos, it demonstrates how small changes \u2014 damping and forcing \u2014 result in complex behavior. This project investigates: Simple Pendulum Damped Pendulum Forced Damped Pendulum 1. Differential Equations Simple Pendulum \\[\\frac{d^2\\theta}{dt^2} + \\omega_0^2 \\sin(\\theta) = 0\\] For small angles: \\[\\frac{d^2\\theta}{dt^2} + \\omega_0^2 \\theta = 0, \\quad \\omega_0 = \\sqrt{\\frac{g}{L}}\\] Damped Pendulum \\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0\\] Forced Damped Pendulum \\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t)\\] 2. Visualizing the Simple Pendulum (Small Angle Approximation) import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) theta0 = 0.2 t = np.linspace(0, 10, 1000) theta = theta0 * np.cos(omega0 * t) # Plot plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Simple Pendulum (Small Angle Approximation)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Visit: Colab 3. Visualizing the Damped Pendulum # Damped system using RK4 import numpy as np import matplotlib.pyplot as plt dt = 0.01 t = np.arange(0, 20, dt) b = 0.3 # damping theta = np.zeros_like(t) omega = np.zeros_like(t) theta[0] = 0.5 # Define omega0 here omega0 = 1.0 # You can change this value to the desired natural frequency def rk4_damped(theta, omega, t, dt, b, omega0): def f(t, y): theta, omega = y return np.array([omega, -b * omega - omega0**2 * theta]) y = np.array([theta, omega]) k1 = f(t, y) k2 = f(t + dt/2, y + dt*k1/2) k3 = f(t + dt/2, y + dt*k2/2) k4 = f(t + dt, y + dt*k3) return y + dt * (k1 + 2*k2 + 2*k3 + k4)/6 for i in range(1, len(t)): theta[i], omega[i] = rk4_damped(theta[i-1], omega[i-1], t[i-1], dt, b, omega0) plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Damped Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Visit: Colab 4. Visualizing the Forced Damped Pendulum # Forced Damped Pendulum Simulation import numpy as np import matplotlib.pyplot as plt # Parameters omega0 = 2 dt = 0.01 t = np.arange(0, 10, dt) A = 1.2 omega_d = 2/3 b = 0.5 theta = np.zeros_like(t) omega = np.zeros_like(t) theta[0] = 0.5 def rk4_forced(theta, omega, t, dt, b, A, omega_d, omega0): def f(t, y): theta, omega = y return np.array([omega, -b * omega - omega0**2 * np.sin(theta) + A * np.cos(omega_d * t)]) y = np.array([theta, omega]) k1 = f(t, y) k2 = f(t + dt/2, y + dt*k1/2) k3 = f(t + dt/2, y + dt*k2/2) k4 = f(t + dt, y + dt*k3) return y + dt * (k1 + 2*k2 + 2*k3 + k4)/6 for i in range(1, len(t)): theta[i], omega[i] = rk4_forced(theta[i-1], omega[i-1], t[i-1], dt, b, A, omega_d, omega0) # Plot plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Visit: Colab 5. Animation of the Forced Damped Pendulum import matplotlib.animation as animation from IPython.display import HTML import numpy as np # This was missing # Assuming L represents the length of the pendulum, set it to a reasonable value L = 1 # You can adjust this value as needed x_vals = L * np.sin(theta) y_vals = -L * np.cos(theta) fig, ax = plt.subplots(figsize=(6, 6)) ax.set_xlim(-1.2, 1.2) ax.set_ylim(-1.2, 1.2) ax.set_aspect('equal') ax.grid() line, = ax.plot([], [], 'o-', lw=2) trail, = ax.plot([], [], '-', lw=0.5) xdata, ydata = [], [] def init(): line.set_data([], []) trail.set_data([], []) return line, trail def animate(i): x, y = x_vals[i], y_vals[i] xdata.append(x) ydata.append(y) if len(xdata) > 100: xdata.pop(0) ydata.pop(0) line.set_data([0, x], [0, y]) trail.set_data(xdata, ydata) return line, trail ani = animation.FuncAnimation(fig, animate, frames=range(0, len(x_vals), 5), init_func=init, blit=True, interval=20) plt.close() HTML(ani.to_jshtml()) Visit: Colab 6. Extensions and Advanced Explorations Phase Portraits & Poincar\u00e9 Sections : Reveal geometry of motion and transitions to chaos. Bifurcation Diagrams : Vary forcing amplitude \\(A\\) or frequency \\(\\omega\\) and plot long-term values. Energy Analysis : Study how energy is gained/lost under forcing and damping. Lyapunov Exponents : Quantify sensitivity to initial conditions (chaos). Double Pendulum : A 2-link pendulum introduces deeper chaos with no external force. Planetary Gravity : Modify \\(g\\) to simulate behavior on Mars, Moon, etc. 7. Conclusion This project comprehensively examined pendulum dynamics in three stages: Variant Damping Forcing Behavior Simple Pendulum \u2718 \u2718 Periodic Damped Pendulum \u2714 \u2718 Decaying oscillations Forced Damped \u2714 \u2714 Periodic / Quasiperiodic / Chaotic We: - Derived differential equations - Simulated each case using Runge-Kutta - Visualized the systems with graphs and animations - Proposed extensions into bifurcations, chaos, and energy studies The forced damped pendulum, though conceptually simple, becomes a gateway into the study of nonlinear systems and chaos \u2014 illustrating how deterministic rules can yield unpredictable motion.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The pendulum is a powerful model in physics. From simple harmonic motion to chaos, it demonstrates how small changes \u2014 damping and forcing \u2014 result in complex behavior. This project investigates: Simple Pendulum Damped Pendulum Forced Damped Pendulum","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-differential-equations","text":"","title":"1. Differential Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simple-pendulum","text":"\\[\\frac{d^2\\theta}{dt^2} + \\omega_0^2 \\sin(\\theta) = 0\\] For small angles: \\[\\frac{d^2\\theta}{dt^2} + \\omega_0^2 \\theta = 0, \\quad \\omega_0 = \\sqrt{\\frac{g}{L}}\\]","title":"Simple Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#damped-pendulum","text":"\\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0\\]","title":"Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum","text":"\\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t)\\]","title":"Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-visualizing-the-simple-pendulum-small-angle-approximation","text":"import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) theta0 = 0.2 t = np.linspace(0, 10, 1000) theta = theta0 * np.cos(omega0 * t) # Plot plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Simple Pendulum (Small Angle Approximation)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Visit: Colab","title":"2. Visualizing the Simple Pendulum (Small Angle Approximation)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-visualizing-the-damped-pendulum","text":"# Damped system using RK4 import numpy as np import matplotlib.pyplot as plt dt = 0.01 t = np.arange(0, 20, dt) b = 0.3 # damping theta = np.zeros_like(t) omega = np.zeros_like(t) theta[0] = 0.5 # Define omega0 here omega0 = 1.0 # You can change this value to the desired natural frequency def rk4_damped(theta, omega, t, dt, b, omega0): def f(t, y): theta, omega = y return np.array([omega, -b * omega - omega0**2 * theta]) y = np.array([theta, omega]) k1 = f(t, y) k2 = f(t + dt/2, y + dt*k1/2) k3 = f(t + dt/2, y + dt*k2/2) k4 = f(t + dt, y + dt*k3) return y + dt * (k1 + 2*k2 + 2*k3 + k4)/6 for i in range(1, len(t)): theta[i], omega[i] = rk4_damped(theta[i-1], omega[i-1], t[i-1], dt, b, omega0) plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Damped Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"3. Visualizing the Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#visit-colab","text":"","title":"Visit: Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-visualizing-the-forced-damped-pendulum","text":"# Forced Damped Pendulum Simulation import numpy as np import matplotlib.pyplot as plt # Parameters omega0 = 2 dt = 0.01 t = np.arange(0, 10, dt) A = 1.2 omega_d = 2/3 b = 0.5 theta = np.zeros_like(t) omega = np.zeros_like(t) theta[0] = 0.5 def rk4_forced(theta, omega, t, dt, b, A, omega_d, omega0): def f(t, y): theta, omega = y return np.array([omega, -b * omega - omega0**2 * np.sin(theta) + A * np.cos(omega_d * t)]) y = np.array([theta, omega]) k1 = f(t, y) k2 = f(t + dt/2, y + dt*k1/2) k3 = f(t + dt/2, y + dt*k2/2) k4 = f(t + dt, y + dt*k3) return y + dt * (k1 + 2*k2 + 2*k3 + k4)/6 for i in range(1, len(t)): theta[i], omega[i] = rk4_forced(theta[i-1], omega[i-1], t[i-1], dt, b, A, omega_d, omega0) # Plot plt.figure(figsize=(10, 4)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Visit: Colab","title":"4. Visualizing the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-animation-of-the-forced-damped-pendulum","text":"import matplotlib.animation as animation from IPython.display import HTML import numpy as np # This was missing # Assuming L represents the length of the pendulum, set it to a reasonable value L = 1 # You can adjust this value as needed x_vals = L * np.sin(theta) y_vals = -L * np.cos(theta) fig, ax = plt.subplots(figsize=(6, 6)) ax.set_xlim(-1.2, 1.2) ax.set_ylim(-1.2, 1.2) ax.set_aspect('equal') ax.grid() line, = ax.plot([], [], 'o-', lw=2) trail, = ax.plot([], [], '-', lw=0.5) xdata, ydata = [], [] def init(): line.set_data([], []) trail.set_data([], []) return line, trail def animate(i): x, y = x_vals[i], y_vals[i] xdata.append(x) ydata.append(y) if len(xdata) > 100: xdata.pop(0) ydata.pop(0) line.set_data([0, x], [0, y]) trail.set_data(xdata, ydata) return line, trail ani = animation.FuncAnimation(fig, animate, frames=range(0, len(x_vals), 5), init_func=init, blit=True, interval=20) plt.close() HTML(ani.to_jshtml())","title":"5. Animation of the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#visit-colab_1","text":"","title":"Visit: Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-extensions-and-advanced-explorations","text":"Phase Portraits & Poincar\u00e9 Sections : Reveal geometry of motion and transitions to chaos. Bifurcation Diagrams : Vary forcing amplitude \\(A\\) or frequency \\(\\omega\\) and plot long-term values. Energy Analysis : Study how energy is gained/lost under forcing and damping. Lyapunov Exponents : Quantify sensitivity to initial conditions (chaos). Double Pendulum : A 2-link pendulum introduces deeper chaos with no external force. Planetary Gravity : Modify \\(g\\) to simulate behavior on Mars, Moon, etc.","title":"6. Extensions and Advanced Explorations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-conclusion","text":"This project comprehensively examined pendulum dynamics in three stages: Variant Damping Forcing Behavior Simple Pendulum \u2718 \u2718 Periodic Damped Pendulum \u2714 \u2718 Decaying oscillations Forced Damped \u2714 \u2714 Periodic / Quasiperiodic / Chaotic We: - Derived differential equations - Simulated each case using Runge-Kutta - Visualized the systems with graphs and animations - Proposed extensions into bifurcations, chaos, and energy studies The forced damped pendulum, though conceptually simple, becomes a gateway into the study of nonlinear systems and chaos \u2014 illustrating how deterministic rules can yield unpredictable motion.","title":"7. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius: Kepler\u2019s Third Law 1. Introduction Kepler\u2019s Third Law states that the square of the orbital period \\((T^2)\\) of a planet is proportional to the cube of its orbital radius \\((r^3)\\) . This fundamental law governs planetary and satellite motions, allowing astronomers to determine celestial body masses and distances. The relationship is essential for: - Predicting planetary motions in the solar system. - Designing satellite orbits for communications and space exploration. - Understanding gravitational interactions in astrophysics. 2. Theoretical Derivation For a small body orbiting a much larger central mass (e.g., a planet around the Sun), Newton\u2019s second law and the gravitational force equation yield: \\[F = \\frac{G M m}{r^2} = m \\frac{v^2}{r}\\] where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the central body, - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius, - \\(v\\) is the orbital velocity. For uniform circular motion , velocity is related to orbital period \\(T\\) : \\(v = \\frac{2\\pi r}{T}\\) \\(\\frac{G M m}{r^2} = m \\frac{(2\\pi r)^2}{T^2 r}\\) \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This confirms Kepler\u2019s Third Law : the square of the orbital period is proportional to the cube of the orbital radius . 3. Computational Simulation To verify Kepler\u2019s Law numerically, we simulate circular orbits for different radii and check the relationship between \\(T^2\\) and \\(r^3\\) . Python Simulation of Circular Orbits import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define constants M = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Function to compute orbital period using Kepler's Third Law def orbital_period(r): return 2 * np.pi * np.sqrt(r**3 / (G * M)) # Generate radii from 0.1 AU to 5 AU radii = np.linspace(0.1, 5, 10) * AU periods = np.array([orbital_period(r) for r in radii]) # Verify T^2 vs r^3 relationship T2 = periods**2 R3 = radii**3 # Plot results plt.figure(figsize=(8, 5)) plt.plot(R3, T2, 'o-', label=r'$T^2$ vs $r^3$') plt.xlabel(r'$r^3$ (m\u00b3)') plt.ylabel(r'$T^2$ (s\u00b2)') plt.title(\"Kepler's Third Law Verification\") plt.legend() plt.grid() plt.show() Source Colab 4. Results and Discussion The plot of \\(T^2\\) vs. \\(r^3\\) shows a straight line, confirming Kepler\u2019s Third Law. This law enables astronomers to estimate planetary distances and star masses using observed orbital periods. For elliptical orbits , Kepler\u2019s Law applies using the semi-major axis instead of \\(r\\) . Real-World Applications Earth-Moon System : Predicting the Moon\u2019s motion around Earth. Exoplanet Discovery : Detecting distant planets via their orbital properties. Satellite Orbits : Designing stable GPS and communication satellite paths. 5. Conclusion Kepler\u2019s Third Law provides a fundamental link between orbital period and radius , governing celestial mechanics. Our computational verification confirms this proportionality, demonstrating its validity in planetary systems. Future studies can extend this analysis to elliptical orbits and multi-body gravitational interactions .","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-keplers-third-law","text":"","title":"Orbital Period and Orbital Radius: Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-introduction","text":"Kepler\u2019s Third Law states that the square of the orbital period \\((T^2)\\) of a planet is proportional to the cube of its orbital radius \\((r^3)\\) . This fundamental law governs planetary and satellite motions, allowing astronomers to determine celestial body masses and distances. The relationship is essential for: - Predicting planetary motions in the solar system. - Designing satellite orbits for communications and space exploration. - Understanding gravitational interactions in astrophysics.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-theoretical-derivation","text":"For a small body orbiting a much larger central mass (e.g., a planet around the Sun), Newton\u2019s second law and the gravitational force equation yield: \\[F = \\frac{G M m}{r^2} = m \\frac{v^2}{r}\\] where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the central body, - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius, - \\(v\\) is the orbital velocity. For uniform circular motion , velocity is related to orbital period \\(T\\) : \\(v = \\frac{2\\pi r}{T}\\) \\(\\frac{G M m}{r^2} = m \\frac{(2\\pi r)^2}{T^2 r}\\) \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This confirms Kepler\u2019s Third Law : the square of the orbital period is proportional to the cube of the orbital radius .","title":"2. Theoretical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-computational-simulation","text":"To verify Kepler\u2019s Law numerically, we simulate circular orbits for different radii and check the relationship between \\(T^2\\) and \\(r^3\\) .","title":"3. Computational Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation-of-circular-orbits","text":"import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define constants M = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Function to compute orbital period using Kepler's Third Law def orbital_period(r): return 2 * np.pi * np.sqrt(r**3 / (G * M)) # Generate radii from 0.1 AU to 5 AU radii = np.linspace(0.1, 5, 10) * AU periods = np.array([orbital_period(r) for r in radii]) # Verify T^2 vs r^3 relationship T2 = periods**2 R3 = radii**3 # Plot results plt.figure(figsize=(8, 5)) plt.plot(R3, T2, 'o-', label=r'$T^2$ vs $r^3$') plt.xlabel(r'$r^3$ (m\u00b3)') plt.ylabel(r'$T^2$ (s\u00b2)') plt.title(\"Kepler's Third Law Verification\") plt.legend() plt.grid() plt.show()","title":"Python Simulation of Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#source","text":"Colab","title":"Source"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-results-and-discussion","text":"The plot of \\(T^2\\) vs. \\(r^3\\) shows a straight line, confirming Kepler\u2019s Third Law. This law enables astronomers to estimate planetary distances and star masses using observed orbital periods. For elliptical orbits , Kepler\u2019s Law applies using the semi-major axis instead of \\(r\\) .","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-applications","text":"Earth-Moon System : Predicting the Moon\u2019s motion around Earth. Exoplanet Discovery : Detecting distant planets via their orbital properties. Satellite Orbits : Designing stable GPS and communication satellite paths.","title":"Real-World Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-conclusion","text":"Kepler\u2019s Third Law provides a fundamental link between orbital period and radius , governing celestial mechanics. Our computational verification confirms this proportionality, demonstrating its validity in planetary systems. Future studies can extend this analysis to elliptical orbits and multi-body gravitational interactions .","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities 1. Introduction Escape velocity is the minimum speed an object needs to break free from a celestial body's gravitational pull without further propulsion. This concept extends to cosmic velocities , which define thresholds for orbiting, escaping, and leaving a star system. These principles are fundamental in space exploration , affecting satellite launches, interplanetary travel, and potential interstellar missions. Cosmic Velocities: First Cosmic Velocity \\((v_1)\\) : Orbital velocity for a stable circular orbit. Second Cosmic Velocity \\((v_2)\\) : Escape velocity to leave a planet\u2019s gravity. Third Cosmic Velocity \\((v_3)\\) : Velocity needed to escape the Sun\u2019s gravity from a planet. 2. Theoretical Background 2.1 First Cosmic Velocity (Orbital Velocity) For an object to stay in a circular orbit around a planet of mass \\(M\\) and radius \\(R\\) , its centripetal force must equal gravitational force: \\[\\frac{G M m}{R^2} = m \\frac{v_1^2}{R}\\] Solving for \\(v_1\\) : \\[v_1 = \\sqrt{\\frac{G M}{R}}\\] 2.2 Second Cosmic Velocity (Escape Velocity) The escape velocity is found by equating kinetic energy to gravitational potential energy: \\[\\frac{1}{2} m v_2^2 = \\frac{G M m}{R}\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{R}}\\] 2.3 Third Cosmic Velocity (Interstellar Escape) To leave the solar system, an object must overcome both Earth's and the Sun's gravity. The required velocity is: \\[v_3 = \\sqrt{v_2^2 + v_{\\text{escape,Sun}}^2}\\] where \\(v_{\\text{escape,Sun}}\\) is the escape velocity from the Sun at Earth\u2019s orbit. 3. Computational Simulation We compute these velocities for Earth, Mars, and Jupiter using Python. import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define celestial bodies (Mass in kg, Radius in meters) bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.389e6), \"Jupiter\": (1.898e27, 6.9911e7) } # Compute first, second, and third cosmic velocities def compute_velocities(M, R): v1 = np.sqrt(G * M / R) # First cosmic velocity (Orbital) v2 = np.sqrt(2 * G * M / R) # Second cosmic velocity (Escape) return v1, v2 # Store results results = {body: compute_velocities(M, R) for body, (M, R) in bodies.items()} # Plot results labels = [\"First Cosmic Velocity (km/s)\", \"Second Cosmic Velocity (km/s)\"] colors = ['blue', 'red'] x = np.arange(len(bodies)) plt.figure(figsize=(8, 5)) for i in range(2): plt.bar(x + i * 0.3, [results[body][i] / 1e3 for body in bodies], width=0.3, label=labels[i], color=colors[i]) plt.xticks(x + 0.15, bodies.keys()) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid() plt.show() Colab 4. Results and Discussion Earth: \\(v_1 \\approx 7.91\\) km/s (orbital) \\(v_2 \\approx 11.19\\) km/s (escape) Mars: Lower due to weaker gravity ( \\(v_1 \\approx 3.55\\) km/s, $v_2 \\approx 5.03 $ km/s) Jupiter: Higher due to stronger gravity ( \\(v_1 \\approx 42.1\\) km/s, \\(v_2 \\approx 59.5\\) km/s) Importance in Space Exploration Satellites & Space Stations require first cosmic velocity to remain in orbit. Missions to the Moon & Mars need escape velocity to leave Earth. Interstellar Missions (e.g., Voyager probes) need third cosmic velocity to leave the solar system. 5. Conclusion This report derived and computed cosmic velocities for Earth, Mars, and Jupiter, demonstrating their importance in space missions. The Python simulation confirmed the theoretical values, showing how gravitational differences impact space travel. Future work can explore atmospheric drag, multi-body interactions, and advanced propulsion methods for interstellar exploration.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-introduction","text":"Escape velocity is the minimum speed an object needs to break free from a celestial body's gravitational pull without further propulsion. This concept extends to cosmic velocities , which define thresholds for orbiting, escaping, and leaving a star system. These principles are fundamental in space exploration , affecting satellite launches, interplanetary travel, and potential interstellar missions.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities","text":"First Cosmic Velocity \\((v_1)\\) : Orbital velocity for a stable circular orbit. Second Cosmic Velocity \\((v_2)\\) : Escape velocity to leave a planet\u2019s gravity. Third Cosmic Velocity \\((v_3)\\) : Velocity needed to escape the Sun\u2019s gravity from a planet.","title":"Cosmic Velocities:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-theoretical-background","text":"","title":"2. Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-first-cosmic-velocity-orbital-velocity","text":"For an object to stay in a circular orbit around a planet of mass \\(M\\) and radius \\(R\\) , its centripetal force must equal gravitational force: \\[\\frac{G M m}{R^2} = m \\frac{v_1^2}{R}\\] Solving for \\(v_1\\) : \\[v_1 = \\sqrt{\\frac{G M}{R}}\\]","title":"2.1 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-second-cosmic-velocity-escape-velocity","text":"The escape velocity is found by equating kinetic energy to gravitational potential energy: \\[\\frac{1}{2} m v_2^2 = \\frac{G M m}{R}\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{R}}\\]","title":"2.2 Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#23-third-cosmic-velocity-interstellar-escape","text":"To leave the solar system, an object must overcome both Earth's and the Sun's gravity. The required velocity is: \\[v_3 = \\sqrt{v_2^2 + v_{\\text{escape,Sun}}^2}\\] where \\(v_{\\text{escape,Sun}}\\) is the escape velocity from the Sun at Earth\u2019s orbit.","title":"2.3 Third Cosmic Velocity (Interstellar Escape)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-computational-simulation","text":"We compute these velocities for Earth, Mars, and Jupiter using Python. import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define celestial bodies (Mass in kg, Radius in meters) bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.389e6), \"Jupiter\": (1.898e27, 6.9911e7) } # Compute first, second, and third cosmic velocities def compute_velocities(M, R): v1 = np.sqrt(G * M / R) # First cosmic velocity (Orbital) v2 = np.sqrt(2 * G * M / R) # Second cosmic velocity (Escape) return v1, v2 # Store results results = {body: compute_velocities(M, R) for body, (M, R) in bodies.items()} # Plot results labels = [\"First Cosmic Velocity (km/s)\", \"Second Cosmic Velocity (km/s)\"] colors = ['blue', 'red'] x = np.arange(len(bodies)) plt.figure(figsize=(8, 5)) for i in range(2): plt.bar(x + i * 0.3, [results[body][i] / 1e3 for body in bodies], width=0.3, label=labels[i], color=colors[i]) plt.xticks(x + 0.15, bodies.keys()) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid() plt.show() Colab","title":"3. Computational Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-results-and-discussion","text":"Earth: \\(v_1 \\approx 7.91\\) km/s (orbital) \\(v_2 \\approx 11.19\\) km/s (escape) Mars: Lower due to weaker gravity ( \\(v_1 \\approx 3.55\\) km/s, $v_2 \\approx 5.03 $ km/s) Jupiter: Higher due to stronger gravity ( \\(v_1 \\approx 42.1\\) km/s, \\(v_2 \\approx 59.5\\) km/s)","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#importance-in-space-exploration","text":"Satellites & Space Stations require first cosmic velocity to remain in orbit. Missions to the Moon & Mars need escape velocity to leave Earth. Interstellar Missions (e.g., Voyager probes) need third cosmic velocity to leave the solar system.","title":"Importance in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-conclusion","text":"This report derived and computed cosmic velocities for Earth, Mars, and Jupiter, demonstrating their importance in space missions. The Python simulation confirmed the theoretical values, showing how gravitational differences impact space travel. Future work can explore atmospheric drag, multi-body interactions, and advanced propulsion methods for interstellar exploration.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth 1. Introduction When a payload is released from a moving rocket near Earth, its motion depends on initial velocity, altitude, and gravitational forces . Understanding these trajectories is essential for orbital insertion, reentry planning, and satellite deployment . The possible paths include: - Elliptical orbits (if velocity is below escape velocity). - Parabolic trajectories (if velocity equals escape velocity). - Hyperbolic escape paths (if velocity exceeds escape velocity). - Suborbital trajectories (if reentry occurs). 2. Theoretical Background 2.1 Governing Equations Using Newton\u2019s Second Law and Universal Gravitation, the equation of motion for a payload influenced only by Earth\u2019s gravity is: \\[\\mathbf{F} = m \\mathbf{a} = -\\frac{G M m}{r^2} \\hat{r}\\] which leads to the gravitational acceleration : \\[\\mathbf{a} = -\\frac{G M}{r^2} \\hat{r}\\] where: - \\(G = 6.674 \\times 10^{-11}\\) m\u00b3/kg/s\u00b2 (gravitational constant). - \\(M = 5.972 \\times 10^{24}\\) kg (mass of Earth). - \\(r\\) is the payload\u2019s radial distance from Earth\u2019s center. For different initial velocities \\(( v_0)\\) at release altitude \\(r_0\\) : - If \\(v_0 < v_1\\) (orbital velocity): Suborbital reentry . - If \\(v_0 = v_1\\) : Circular orbit . - If \\(v_1 < v_0 < v_2\\) (escape velocity): Elliptical orbit . - If \\(v_0 = v_2\\) : Parabolic escape . - If \\(v_0 > v_2\\) : Hyperbolic escape . 3. Numerical Simulation We simulate a payload's trajectory using Runge-Kutta methods to solve the equation of motion in two dimensions. Python Implementation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp from scipy.constants import G # Define Earth parameters M_earth = 5.972e24 # kg R_earth = 6.371e6 # meters # Define the equations of motion def equations(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M_earth * x / r**3 ay = -G * M_earth * y / r**3 return [vx, vy, ax, ay] # Initial conditions: Release altitude and velocity altitude = 400e3 # 400 km above Earth r0 = R_earth + altitude v0_values = [6.8e3, 7.9e3, 11.2e3] # Below, at, and above orbital velocity (m/s) # Time span t_span = (0, 5000) t_eval = np.linspace(*t_span, 1000) # Simulate and plot different cases plt.figure(figsize=(7, 7)) for v0 in v0_values: initial_state = [r0, 0, 0, v0] # (x0, y0, vx0, vy0) sol = solve_ivp(equations, t_span, initial_state, t_eval=t_eval, method='RK45') plt.plot(sol.y[0], sol.y[1], label=f'v0 = {v0 / 1e3:.1f} km/s') # Plot Earth theta = np.linspace(0, 2*np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k', label='Earth') plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.title(\"Payload Trajectories Near Earth\") plt.legend() plt.grid() plt.axis('equal') plt.show() Colab 4. Results and Discussion Suborbital (e.g., \\( v_0 = 6.8 \\) km/s) : The payload follows a curved trajectory but falls back to Earth. Orbital Insertion (e.g., \\( v_0 = 7.9 \\) km/s) : The payload enters a stable circular orbit. Escape Trajectory (e.g., \\( v_0 = 11.2 \\) km/s) : The payload follows a hyperbolic path, escaping Earth's gravity. Real-World Applications Satellite Deployment : Space agencies use precise velocity control to achieve stable orbits. Reentry Planning : Spacecraft must control velocity for safe reentry (e.g., ISS, capsules). Interplanetary Travel : Higher velocity payloads can escape Earth and travel to Mars or beyond. 5. Conclusion This report analyzed the trajectories of a freely released payload using theoretical equations and numerical simulations . The results confirm how initial velocity dictates whether a payload reenters, orbits, or escapes . This understanding is fundamental in space mission planning, satellite deployment, and interplanetary travel . Future extensions could include atmospheric drag effects, three-body interactions, or maneuvering thruster effects .","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-introduction","text":"When a payload is released from a moving rocket near Earth, its motion depends on initial velocity, altitude, and gravitational forces . Understanding these trajectories is essential for orbital insertion, reentry planning, and satellite deployment . The possible paths include: - Elliptical orbits (if velocity is below escape velocity). - Parabolic trajectories (if velocity equals escape velocity). - Hyperbolic escape paths (if velocity exceeds escape velocity). - Suborbital trajectories (if reentry occurs).","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-theoretical-background","text":"","title":"2. Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#21-governing-equations","text":"Using Newton\u2019s Second Law and Universal Gravitation, the equation of motion for a payload influenced only by Earth\u2019s gravity is: \\[\\mathbf{F} = m \\mathbf{a} = -\\frac{G M m}{r^2} \\hat{r}\\] which leads to the gravitational acceleration : \\[\\mathbf{a} = -\\frac{G M}{r^2} \\hat{r}\\] where: - \\(G = 6.674 \\times 10^{-11}\\) m\u00b3/kg/s\u00b2 (gravitational constant). - \\(M = 5.972 \\times 10^{24}\\) kg (mass of Earth). - \\(r\\) is the payload\u2019s radial distance from Earth\u2019s center. For different initial velocities \\(( v_0)\\) at release altitude \\(r_0\\) : - If \\(v_0 < v_1\\) (orbital velocity): Suborbital reentry . - If \\(v_0 = v_1\\) : Circular orbit . - If \\(v_1 < v_0 < v_2\\) (escape velocity): Elliptical orbit . - If \\(v_0 = v_2\\) : Parabolic escape . - If \\(v_0 > v_2\\) : Hyperbolic escape .","title":"2.1 Governing Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-numerical-simulation","text":"We simulate a payload's trajectory using Runge-Kutta methods to solve the equation of motion in two dimensions.","title":"3. Numerical Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-implementation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp from scipy.constants import G # Define Earth parameters M_earth = 5.972e24 # kg R_earth = 6.371e6 # meters # Define the equations of motion def equations(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M_earth * x / r**3 ay = -G * M_earth * y / r**3 return [vx, vy, ax, ay] # Initial conditions: Release altitude and velocity altitude = 400e3 # 400 km above Earth r0 = R_earth + altitude v0_values = [6.8e3, 7.9e3, 11.2e3] # Below, at, and above orbital velocity (m/s) # Time span t_span = (0, 5000) t_eval = np.linspace(*t_span, 1000) # Simulate and plot different cases plt.figure(figsize=(7, 7)) for v0 in v0_values: initial_state = [r0, 0, 0, v0] # (x0, y0, vx0, vy0) sol = solve_ivp(equations, t_span, initial_state, t_eval=t_eval, method='RK45') plt.plot(sol.y[0], sol.y[1], label=f'v0 = {v0 / 1e3:.1f} km/s') # Plot Earth theta = np.linspace(0, 2*np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k', label='Earth') plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.title(\"Payload Trajectories Near Earth\") plt.legend() plt.grid() plt.axis('equal') plt.show() Colab","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-results-and-discussion","text":"Suborbital (e.g., \\( v_0 = 6.8 \\) km/s) : The payload follows a curved trajectory but falls back to Earth. Orbital Insertion (e.g., \\( v_0 = 7.9 \\) km/s) : The payload enters a stable circular orbit. Escape Trajectory (e.g., \\( v_0 = 11.2 \\) km/s) : The payload follows a hyperbolic path, escaping Earth's gravity.","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#real-world-applications","text":"Satellite Deployment : Space agencies use precise velocity control to achieve stable orbits. Reentry Planning : Spacecraft must control velocity for safe reentry (e.g., ISS, capsules). Interplanetary Travel : Higher velocity payloads can escape Earth and travel to Mars or beyond.","title":"Real-World Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-conclusion","text":"This report analyzed the trajectories of a freely released payload using theoretical equations and numerical simulations . The results confirm how initial velocity dictates whether a payload reenters, orbits, or escapes . This understanding is fundamental in space mission planning, satellite deployment, and interplanetary travel . Future extensions could include atmospheric drag effects, three-body interactions, or maneuvering thruster effects .","title":"5. Conclusion"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Interference Patterns on a Water Surface 1. Introduction Wave interference occurs when multiple waves overlap, leading to constructive (amplification) and destructive (cancellation) interference. On a water surface , circular waves from different sources create complex interference patterns , which are influenced by the number, position, and phase of sources . This study investigates interference patterns from multiple point sources arranged in regular polygons . Understanding such patterns has applications in acoustics, optics, and fluid dynamics . 2. Theoretical Background 2.1 Wave Equation for a Point Source A circular wave from a point source at position \\(\\mathbf{r_i}\\) is given by: \\[\\psi_i(\\mathbf{r}, t) = A \\cos(k r_i - \\omega t + \\phi_0)\\] where: - \\(\\psi_i(\\mathbf{r}, t)\\) is the displacement at point \\(\\mathbf{r}\\) and time \\(t\\) . - \\(A\\) is the amplitude . - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number . - \\(\\omega = 2\\pi f\\) is the angular frequency . - \\(r_i = |\\mathbf{r} - \\mathbf{r_i}|\\) is the distance from the source. - \\(\\phi_0\\) is the initial phase . 2.2 Superposition of Multiple Waves If there are \\(N\\) wave sources at positions \\(\\mathbf{r_i}\\) , the total displacement is: \\[\\Psi(\\mathbf{r}, t) = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi_0)\\] The interference pattern results from this sum. 2.3 Regular Polygon Source Arrangement We place sources at the vertices of a regular polygon (e.g., triangle, square, pentagon ) with center at the origin. Each vertex has coordinates: \\[\\mathbf{r_i} = R (\\cos \\theta_i, \\sin \\theta_i)\\] where \\(\\theta_i = \\frac{2\\pi i}{N}\\) , for \\(i = 0, 1, ..., N-1\\) . 3. Computational Simulation Python Implementation We simulate wave interference for sources placed at the vertices of a regular polygon using NumPy and Matplotlib . import numpy as np import matplotlib.pyplot as plt # Define wave parameters A = 1 # Amplitude lambda_wave = 1 # Wavelength k = 2 * np.pi / lambda_wave # Wave number omega = 2 * np.pi # Angular frequency N = 5 # Number of sources (Regular pentagon) R = 5 # Distance of sources from origin grid_size = 200 # Resolution # Define spatial grid x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y) # Define source positions (vertices of polygon) angles = np.linspace(0, 2*np.pi, N, endpoint=False) sources = [(R * np.cos(angle), R * np.sin(angle)) for angle in angles] # Compute wave superposition wave_sum = np.zeros_like(X) for (x0, y0) in sources: r = np.sqrt((X - x0)**2 + (Y - y0)**2) wave_sum += A * np.cos(k * r) # Plot the interference pattern plt.figure(figsize=(7, 7)) plt.imshow(wave_sum, extent=[-10, 10, -10, 10], cmap=\"RdBu\", origin=\"lower\") plt.colorbar(label=\"Wave Displacement\") plt.scatter(*zip(*sources), color=\"black\", marker=\"o\", label=\"Wave Sources\") plt.title(\"Interference Pattern for a Regular Pentagon\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.legend() plt.show() Colab 4. Results and Discussion Constructive Interference occurs where waves reinforce each other, creating bright regions. Destructive Interference occurs where waves cancel, forming dark regions. The polygon shape affects the pattern , leading to symmetric and repeating interference zones . Different Polygon Cases Polygon Interference Behavior Triangle (N=3) Large interference zones, simple symmetry. Square (N=4) More complex interference fringes. Pentagon (N=5) Higher symmetry, intricate wave interactions. Real-World Applications Optics: Interference of light waves in holography and diffraction gratings . Acoustics: Sound wave interference in concert halls and speaker systems . Fluid Dynamics: Wave interactions in oceans and engineering . 5. Conclusion This report investigated wave interference on a water surface for multiple sources arranged in regular polygons . The numerical simulation confirmed that the source arrangement significantly influences interference patterns . Future work could explore nonlinear effects, wave damping, and 3D wave interactions .","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-introduction","text":"Wave interference occurs when multiple waves overlap, leading to constructive (amplification) and destructive (cancellation) interference. On a water surface , circular waves from different sources create complex interference patterns , which are influenced by the number, position, and phase of sources . This study investigates interference patterns from multiple point sources arranged in regular polygons . Understanding such patterns has applications in acoustics, optics, and fluid dynamics .","title":"1. Introduction"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-theoretical-background","text":"","title":"2. Theoretical Background"},{"location":"1%20Physics/3%20Waves/Problem_1/#21-wave-equation-for-a-point-source","text":"A circular wave from a point source at position \\(\\mathbf{r_i}\\) is given by: \\[\\psi_i(\\mathbf{r}, t) = A \\cos(k r_i - \\omega t + \\phi_0)\\] where: - \\(\\psi_i(\\mathbf{r}, t)\\) is the displacement at point \\(\\mathbf{r}\\) and time \\(t\\) . - \\(A\\) is the amplitude . - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number . - \\(\\omega = 2\\pi f\\) is the angular frequency . - \\(r_i = |\\mathbf{r} - \\mathbf{r_i}|\\) is the distance from the source. - \\(\\phi_0\\) is the initial phase .","title":"2.1 Wave Equation for a Point Source"},{"location":"1%20Physics/3%20Waves/Problem_1/#22-superposition-of-multiple-waves","text":"If there are \\(N\\) wave sources at positions \\(\\mathbf{r_i}\\) , the total displacement is: \\[\\Psi(\\mathbf{r}, t) = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi_0)\\] The interference pattern results from this sum.","title":"2.2 Superposition of Multiple Waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#23-regular-polygon-source-arrangement","text":"We place sources at the vertices of a regular polygon (e.g., triangle, square, pentagon ) with center at the origin. Each vertex has coordinates: \\[\\mathbf{r_i} = R (\\cos \\theta_i, \\sin \\theta_i)\\] where \\(\\theta_i = \\frac{2\\pi i}{N}\\) , for \\(i = 0, 1, ..., N-1\\) .","title":"2.3 Regular Polygon Source Arrangement"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-computational-simulation","text":"","title":"3. Computational Simulation"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-implementation","text":"We simulate wave interference for sources placed at the vertices of a regular polygon using NumPy and Matplotlib . import numpy as np import matplotlib.pyplot as plt # Define wave parameters A = 1 # Amplitude lambda_wave = 1 # Wavelength k = 2 * np.pi / lambda_wave # Wave number omega = 2 * np.pi # Angular frequency N = 5 # Number of sources (Regular pentagon) R = 5 # Distance of sources from origin grid_size = 200 # Resolution # Define spatial grid x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y) # Define source positions (vertices of polygon) angles = np.linspace(0, 2*np.pi, N, endpoint=False) sources = [(R * np.cos(angle), R * np.sin(angle)) for angle in angles] # Compute wave superposition wave_sum = np.zeros_like(X) for (x0, y0) in sources: r = np.sqrt((X - x0)**2 + (Y - y0)**2) wave_sum += A * np.cos(k * r) # Plot the interference pattern plt.figure(figsize=(7, 7)) plt.imshow(wave_sum, extent=[-10, 10, -10, 10], cmap=\"RdBu\", origin=\"lower\") plt.colorbar(label=\"Wave Displacement\") plt.scatter(*zip(*sources), color=\"black\", marker=\"o\", label=\"Wave Sources\") plt.title(\"Interference Pattern for a Regular Pentagon\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.legend() plt.show() Colab","title":"Python Implementation"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-results-and-discussion","text":"Constructive Interference occurs where waves reinforce each other, creating bright regions. Destructive Interference occurs where waves cancel, forming dark regions. The polygon shape affects the pattern , leading to symmetric and repeating interference zones .","title":"4. Results and Discussion"},{"location":"1%20Physics/3%20Waves/Problem_1/#different-polygon-cases","text":"Polygon Interference Behavior Triangle (N=3) Large interference zones, simple symmetry. Square (N=4) More complex interference fringes. Pentagon (N=5) Higher symmetry, intricate wave interactions.","title":"Different Polygon Cases"},{"location":"1%20Physics/3%20Waves/Problem_1/#real-world-applications","text":"Optics: Interference of light waves in holography and diffraction gratings . Acoustics: Sound wave interference in concert halls and speaker systems . Fluid Dynamics: Wave interactions in oceans and engineering .","title":"Real-World Applications"},{"location":"1%20Physics/3%20Waves/Problem_1/#5-conclusion","text":"This report investigated wave interference on a water surface for multiple sources arranged in regular polygons . The numerical simulation confirmed that the source arrangement significantly influences interference patterns . Future work could explore nonlinear effects, wave damping, and 3D wave interactions .","title":"5. Conclusion"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1 Simulating the Effects of the Lorentz Force Motivation: The Lorentz force, described by the equation F = q(E + v \u00d7 B) , governs the motion of charged particles in the presence of electric (E) and magnetic (B) fields. This force is fundamental in numerous areas of physics, including particle accelerators, mass spectrometers, and plasma confinement. By simulating particle motion under the influence of these fields, we can visualize the complex trajectories and gain insight into practical applications in areas such as cyclotrons and magnetic confinement systems. 1. Exploration of Applications: The Lorentz force is central to systems where charged particles interact with electromagnetic fields. Key applications include: - Particle Accelerators: In cyclotrons or synchrotrons, charged particles are accelerated by electric fields and guided by magnetic fields. - Mass Spectrometers: Charged particles are deflected by magnetic fields, allowing scientists to measure their mass-to-charge ratio. - Plasma Confinement: Magnetic fields are used to confine plasma in devices like Tokamaks for nuclear fusion research. Electric fields \\((E)\\) affect particles by accelerating them in the direction of the field, while magnetic fields \\((B)\\) exert a force perpendicular to both the velocity of the particle and the magnetic field, causing circular or spiral motion. The combination of these fields controls the particle's motion in advanced technologies. 2. Simulating Particle Motion: To simulate the motion of a charged particle, we solve the Lorentz force equation using numerical methods. We will simulate the particle\u2019s motion under different field configurations: - Uniform Magnetic Field: The particle moves in a circular or helical trajectory depending on the initial velocity components. - Combined Electric and Magnetic Fields: The electric and magnetic forces combine to produce more complex trajectories, like drift or spiral motion. - Crossed Electric and Magnetic Fields: A specific case where the electric and magnetic fields are perpendicular to each other, leading to interesting particle behavior. 3. Parameter Exploration: In the simulation, we will vary the following parameters: - Field Strengths (E, B): The intensity of the electric and magnetic fields. - Initial Particle Velocity (v): The starting velocity of the particle, including both magnitude and direction. - Charge and Mass of the Particle (q, m): The properties of the particle will influence the strength of the Lorentz force. These parameters will be varied to observe their impact on the trajectory of the particle. 4. Visualization: We will generate 2D and 3D visualizations of the particle's motion. Key phenomena to be highlighted include: - Larmor Radius: The radius of the circular path the particle follows in a uniform magnetic field. - Drift Velocity: The velocity of the particle when both electric and magnetic fields are present. Python Code Implementation: We use numerical integration (Euler or Runge-Kutta method) to solve the equation of motion for the charged particle. Below is an implementation using Python with the NumPy and Matplotlib libraries for calculations and visualizations. import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Constants q = 1.6e-19 # Charge of the particle in Coulombs m = 9.11e-31 # Mass of the particle in kg E = np.array([0, 0, 0]) # Electric field (zero for this example) B = np.array([0, 0, 1]) # Magnetic field along the z-axis v_initial = np.array([1e6, 0, 0]) # Initial velocity of the particle (m/s) # Time setup t_max = 1e-6 # Maximum time dt = 1e-9 # Time step steps = int(t_max / dt) # Number of steps # Arrays to store position and velocity positions = np.zeros((steps, 3)) velocities = np.zeros((steps, 3)) # Initial conditions positions[0] = np.array([0, 0, 0]) velocities[0] = v_initial # Simulation loop for i in range(1, steps): # Lorentz force F = q(E + v x B) v = velocities[i-1] F = q * (E + np.cross(v, B)) # Update velocity and position using Euler's method velocities[i] = v + F * dt / m positions[i] = positions[i-1] + velocities[i] * dt # Plot the results in 3D fig = plt.figure() ax = fig.add_subplot(111, projection='3d') ax.plot(positions[:, 0], positions[:, 1], positions[:, 2]) # Label axes and show the plot ax.set_xlabel('X position (m)') ax.set_ylabel('Y position (m)') ax.set_zlabel('Z position (m)') ax.set_title('Particle Trajectory under Lorentz Force') plt.show() Colab 5. Discussion: This simulation provides a clear visualization of how a charged particle behaves under different field configurations. The motion can be circular, helical, or drift depending on the presence of the electric and magnetic fields. In a uniform magnetic field , the particle traces a circular path with a radius determined by the Larmor radius , which is given by the equation: \\( \\(r_L = \\frac{mv_{\\perp}}{qB}\\) \\) where \\(v_{\\perp}\\) is the component of the velocity perpendicular to the magnetic field. In combined fields , the particle may exhibit complex motion such as drift velocity, where the electric field exerts a force in the direction of the field, while the magnetic field causes perpendicular motion. This simulation mimics the behavior observed in real-world devices like cyclotrons and mass spectrometers , where charged particles are manipulated by magnetic fields for acceleration and detection. 6. Suggestions for Future Extensions: Non-Uniform Fields: Extend the simulation to include non-uniform electric and magnetic fields (e.g., magnetic gradients in a magnetic trap). Relativistic Effects: For very high velocities, include relativistic corrections to the particle\u2019s mass and velocity. Particle Collisions: Add more complexity by simulating interactions between multiple particles. Conclusion: Simulating the Lorentz force provides valuable insights into the motion of charged particles in electromagnetic fields, essential for understanding the behavior of systems like particle accelerators and mass spectrometers. The results from this simulation offer a practical and visual understanding of how particles are controlled in these systems, with further potential to extend this model to more complex scenarios.","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#simulating-the-effects-of-the-lorentz-force","text":"","title":"Simulating the Effects of the Lorentz Force"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#motivation","text":"The Lorentz force, described by the equation F = q(E + v \u00d7 B) , governs the motion of charged particles in the presence of electric (E) and magnetic (B) fields. This force is fundamental in numerous areas of physics, including particle accelerators, mass spectrometers, and plasma confinement. By simulating particle motion under the influence of these fields, we can visualize the complex trajectories and gain insight into practical applications in areas such as cyclotrons and magnetic confinement systems.","title":"Motivation:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#1-exploration-of-applications","text":"The Lorentz force is central to systems where charged particles interact with electromagnetic fields. Key applications include: - Particle Accelerators: In cyclotrons or synchrotrons, charged particles are accelerated by electric fields and guided by magnetic fields. - Mass Spectrometers: Charged particles are deflected by magnetic fields, allowing scientists to measure their mass-to-charge ratio. - Plasma Confinement: Magnetic fields are used to confine plasma in devices like Tokamaks for nuclear fusion research. Electric fields \\((E)\\) affect particles by accelerating them in the direction of the field, while magnetic fields \\((B)\\) exert a force perpendicular to both the velocity of the particle and the magnetic field, causing circular or spiral motion. The combination of these fields controls the particle's motion in advanced technologies.","title":"1. Exploration of Applications:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#2-simulating-particle-motion","text":"To simulate the motion of a charged particle, we solve the Lorentz force equation using numerical methods. We will simulate the particle\u2019s motion under different field configurations: - Uniform Magnetic Field: The particle moves in a circular or helical trajectory depending on the initial velocity components. - Combined Electric and Magnetic Fields: The electric and magnetic forces combine to produce more complex trajectories, like drift or spiral motion. - Crossed Electric and Magnetic Fields: A specific case where the electric and magnetic fields are perpendicular to each other, leading to interesting particle behavior.","title":"2. Simulating Particle Motion:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#3-parameter-exploration","text":"In the simulation, we will vary the following parameters: - Field Strengths (E, B): The intensity of the electric and magnetic fields. - Initial Particle Velocity (v): The starting velocity of the particle, including both magnitude and direction. - Charge and Mass of the Particle (q, m): The properties of the particle will influence the strength of the Lorentz force. These parameters will be varied to observe their impact on the trajectory of the particle.","title":"3. Parameter Exploration:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#4-visualization","text":"We will generate 2D and 3D visualizations of the particle's motion. Key phenomena to be highlighted include: - Larmor Radius: The radius of the circular path the particle follows in a uniform magnetic field. - Drift Velocity: The velocity of the particle when both electric and magnetic fields are present.","title":"4. Visualization:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#python-code-implementation","text":"We use numerical integration (Euler or Runge-Kutta method) to solve the equation of motion for the charged particle. Below is an implementation using Python with the NumPy and Matplotlib libraries for calculations and visualizations. import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Constants q = 1.6e-19 # Charge of the particle in Coulombs m = 9.11e-31 # Mass of the particle in kg E = np.array([0, 0, 0]) # Electric field (zero for this example) B = np.array([0, 0, 1]) # Magnetic field along the z-axis v_initial = np.array([1e6, 0, 0]) # Initial velocity of the particle (m/s) # Time setup t_max = 1e-6 # Maximum time dt = 1e-9 # Time step steps = int(t_max / dt) # Number of steps # Arrays to store position and velocity positions = np.zeros((steps, 3)) velocities = np.zeros((steps, 3)) # Initial conditions positions[0] = np.array([0, 0, 0]) velocities[0] = v_initial # Simulation loop for i in range(1, steps): # Lorentz force F = q(E + v x B) v = velocities[i-1] F = q * (E + np.cross(v, B)) # Update velocity and position using Euler's method velocities[i] = v + F * dt / m positions[i] = positions[i-1] + velocities[i] * dt # Plot the results in 3D fig = plt.figure() ax = fig.add_subplot(111, projection='3d') ax.plot(positions[:, 0], positions[:, 1], positions[:, 2]) # Label axes and show the plot ax.set_xlabel('X position (m)') ax.set_ylabel('Y position (m)') ax.set_zlabel('Z position (m)') ax.set_title('Particle Trajectory under Lorentz Force') plt.show() Colab","title":"Python Code Implementation:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#5-discussion","text":"This simulation provides a clear visualization of how a charged particle behaves under different field configurations. The motion can be circular, helical, or drift depending on the presence of the electric and magnetic fields. In a uniform magnetic field , the particle traces a circular path with a radius determined by the Larmor radius , which is given by the equation: \\( \\(r_L = \\frac{mv_{\\perp}}{qB}\\) \\) where \\(v_{\\perp}\\) is the component of the velocity perpendicular to the magnetic field. In combined fields , the particle may exhibit complex motion such as drift velocity, where the electric field exerts a force in the direction of the field, while the magnetic field causes perpendicular motion. This simulation mimics the behavior observed in real-world devices like cyclotrons and mass spectrometers , where charged particles are manipulated by magnetic fields for acceleration and detection.","title":"5. Discussion:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#6-suggestions-for-future-extensions","text":"Non-Uniform Fields: Extend the simulation to include non-uniform electric and magnetic fields (e.g., magnetic gradients in a magnetic trap). Relativistic Effects: For very high velocities, include relativistic corrections to the particle\u2019s mass and velocity. Particle Collisions: Add more complexity by simulating interactions between multiple particles.","title":"6. Suggestions for Future Extensions:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#conclusion","text":"Simulating the Lorentz force provides valuable insights into the motion of charged particles in electromagnetic fields, essential for understanding the behavior of systems like particle accelerators and mass spectrometers. The results from this simulation offer a practical and visual understanding of how particles are controlled in these systems, with further potential to extend this model to more complex scenarios.","title":"Conclusion:"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1 Equivalent Resistance Using Graph Theory 1. Introduction Calculating equivalent resistance in electrical circuits is essential for analyzing and designing efficient electrical systems. While traditional methods involve applying series and parallel resistance rules, these approaches become cumbersome for circuits with many components. Using graph theory , we can simplify circuit analysis by representing the circuit as a graph where nodes represent junctions and edges represent resistors. This report explores an algorithmic approach to calculating equivalent resistance using graph theory. Specifically, we will describe a graph-based algorithm that simplifies circuits systematically, reducing even the most intricate networks into manageable components. The method's versatility makes it an ideal solution for circuit simulation, optimization, and automated analysis. 2. Problem Statement In this task, we aim to develop an algorithm that calculates the equivalent resistance for arbitrary circuits by representing them as graphs . The algorithm should: Identify series and parallel connections of resistors. Iteratively reduce the graph until a single equivalent resistance is obtained. Handle complex circuits with nested series and parallel combinations . 3. Algorithm Description We will describe an algorithm that uses graph theory to calculate the equivalent resistance of a circuit. The graph representation has: Nodes : Junctions or points in the circuit. Edges : Resistors connecting the nodes. Step 1: Represent the Circuit as a Graph We start by representing the circuit as a graph \\(G(V, E)\\) , where: - \\(V\\) is the set of nodes (junctions). - \\(E\\) is the set of edges (resistors with resistance \\(R\\) ). Step 2: Detect Series and Parallel Connections Series Connection : Two resistors \\(R_1\\) and \\(R_2\\) are in series if they are connected directly end-to-end. The total resistance \\(R_{\\text{total}} = R_1 + R_2\\) . Parallel Connection : Two resistors \\(R_1\\) and \\(R_2\\) are in parallel if they are connected across the same two nodes. The total resistance \\(R_{\\text{total}} = \\frac{1}{\\left(\\frac{1}{R_1} + \\frac{1}{R_2}\\right)}\\) . Step 3: Iteratively Simplify the Graph Using depth-first search (DFS) or breadth-first search (BFS) , we: 1. Identify series and parallel connections. 2. Replace the simplified sections with a single equivalent resistance. 3. Repeat the process until only one edge remains, which represents the equivalent resistance. Step 4: Handle Nested Configurations The algorithm can handle nested series and parallel configurations by applying the series and parallel reduction rules recursively. 4. Python Implementation We will implement the algorithm using the Python NetworkX library, which simplifies graph manipulation. import networkx as nx def series_reduction(R1, R2): \"\"\"Calculates the equivalent resistance for resistors in series.\"\"\" return R1 + R2 def parallel_reduction(R1, R2): \"\"\"Calculates the equivalent resistance for resistors in parallel.\"\"\" return 1 / (1/R1 + 1/R2) def find_series_parallel(graph): \"\"\"Identifies series and parallel connections in the graph.\"\"\" series_connections = [] parallel_connections = [] # Check each pair of nodes for series and parallel connections for edge1 in graph.edges: for edge2 in graph.edges: if edge1 != edge2: # Check if edge1 and edge2 are in series or parallel # Add logic for series/parallel detection pass return series_connections, parallel_connections def simplify_graph(graph): \"\"\"Simplifies the graph by reducing series and parallel resistors.\"\"\" series_connections, parallel_connections = find_series_parallel(graph) for edge1, edge2 in series_connections: R1 = graph[edge1[0]][edge1[1]]['resistance'] R2 = graph[edge2[0]][edge2[1]]['resistance'] new_R = series_reduction(R1, R2) # Replace the two resistors with the equivalent one graph.remove_edge(edge1[0], edge1[1]) graph.remove_edge(edge2[0], edge2[1]) # Add a new edge with resistance 'new_R' for edge1, edge2 in parallel_connections: R1 = graph[edge1[0]][edge1[1]]['resistance'] R2 = graph[edge2[0]][edge2[1]]['resistance'] new_R = parallel_reduction(R1, R2) # Replace the two resistors with the equivalent one graph.remove_edge(edge1[0], edge1[1]) graph.remove_edge(edge2[0], edge2[1]) # Add a new edge with resistance 'new_R' return graph def calculate_equivalent_resistance(graph): \"\"\"Calculates the total equivalent resistance of the circuit.\"\"\" while len(graph.edges) > 1: graph = simplify_graph(graph) # Final equivalent resistance return graph[graph.nodes[0]][graph.nodes[1]]['resistance'] # Example graph with resistors G = nx.Graph() G.add_edge(0, 1, resistance=5) G.add_edge(1, 2, resistance=10) print(f\"Equivalent resistance: {calculate_equivalent_resistance(G)} Ohms\") 5. Analysis and Efficiency Time Complexity The algorithm's complexity depends on the number of edges and nodes in the graph. Each simplification step involves searching for series and parallel connections, which is generally linear in terms of the number of edges. In the worst case, this could require \\(O(E^2)\\) for graph traversal. Space Complexity Space complexity is \\(O(V + E)\\) , where \\(V\\) is the number of vertices and \\(E\\) is the number of edges in the graph. Possible Improvements Optimized Search : Use more efficient graph traversal techniques to identify series and parallel connections faster. Parallel Processing : For larger graphs, parallelizing the search and simplification process could lead to performance improvements. 6. Conclusion This approach uses graph theory to simplify and calculate the equivalent resistance of electrical circuits. The algorithm iteratively reduces complex networks by identifying series and parallel resistor connections. This method is computationally efficient and extends well to more complex circuits with nested combinations. Future improvements could focus on optimizing the search process and enhancing scalability for larger circuits.","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#equivalent-resistance-using-graph-theory","text":"","title":"Equivalent Resistance Using Graph Theory"},{"location":"1%20Physics/5%20Circuits/Problem_1/#1-introduction","text":"Calculating equivalent resistance in electrical circuits is essential for analyzing and designing efficient electrical systems. While traditional methods involve applying series and parallel resistance rules, these approaches become cumbersome for circuits with many components. Using graph theory , we can simplify circuit analysis by representing the circuit as a graph where nodes represent junctions and edges represent resistors. This report explores an algorithmic approach to calculating equivalent resistance using graph theory. Specifically, we will describe a graph-based algorithm that simplifies circuits systematically, reducing even the most intricate networks into manageable components. The method's versatility makes it an ideal solution for circuit simulation, optimization, and automated analysis.","title":"1. Introduction"},{"location":"1%20Physics/5%20Circuits/Problem_1/#2-problem-statement","text":"In this task, we aim to develop an algorithm that calculates the equivalent resistance for arbitrary circuits by representing them as graphs . The algorithm should: Identify series and parallel connections of resistors. Iteratively reduce the graph until a single equivalent resistance is obtained. Handle complex circuits with nested series and parallel combinations .","title":"2. Problem Statement"},{"location":"1%20Physics/5%20Circuits/Problem_1/#3-algorithm-description","text":"We will describe an algorithm that uses graph theory to calculate the equivalent resistance of a circuit. The graph representation has: Nodes : Junctions or points in the circuit. Edges : Resistors connecting the nodes.","title":"3. Algorithm Description"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-1-represent-the-circuit-as-a-graph","text":"We start by representing the circuit as a graph \\(G(V, E)\\) , where: - \\(V\\) is the set of nodes (junctions). - \\(E\\) is the set of edges (resistors with resistance \\(R\\) ).","title":"Step 1: Represent the Circuit as a Graph"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-2-detect-series-and-parallel-connections","text":"Series Connection : Two resistors \\(R_1\\) and \\(R_2\\) are in series if they are connected directly end-to-end. The total resistance \\(R_{\\text{total}} = R_1 + R_2\\) . Parallel Connection : Two resistors \\(R_1\\) and \\(R_2\\) are in parallel if they are connected across the same two nodes. The total resistance \\(R_{\\text{total}} = \\frac{1}{\\left(\\frac{1}{R_1} + \\frac{1}{R_2}\\right)}\\) .","title":"Step 2: Detect Series and Parallel Connections"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-3-iteratively-simplify-the-graph","text":"Using depth-first search (DFS) or breadth-first search (BFS) , we: 1. Identify series and parallel connections. 2. Replace the simplified sections with a single equivalent resistance. 3. Repeat the process until only one edge remains, which represents the equivalent resistance.","title":"Step 3: Iteratively Simplify the Graph"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-4-handle-nested-configurations","text":"","title":"Step 4: Handle Nested Configurations"},{"location":"1%20Physics/5%20Circuits/Problem_1/#the-algorithm-can-handle-nested-series-and-parallel-configurations-by-applying-the-series-and-parallel-reduction-rules-recursively","text":"","title":"The algorithm can handle nested series and parallel configurations by applying the series and parallel reduction rules recursively."},{"location":"1%20Physics/5%20Circuits/Problem_1/#4-python-implementation","text":"We will implement the algorithm using the Python NetworkX library, which simplifies graph manipulation. import networkx as nx def series_reduction(R1, R2): \"\"\"Calculates the equivalent resistance for resistors in series.\"\"\" return R1 + R2 def parallel_reduction(R1, R2): \"\"\"Calculates the equivalent resistance for resistors in parallel.\"\"\" return 1 / (1/R1 + 1/R2) def find_series_parallel(graph): \"\"\"Identifies series and parallel connections in the graph.\"\"\" series_connections = [] parallel_connections = [] # Check each pair of nodes for series and parallel connections for edge1 in graph.edges: for edge2 in graph.edges: if edge1 != edge2: # Check if edge1 and edge2 are in series or parallel # Add logic for series/parallel detection pass return series_connections, parallel_connections def simplify_graph(graph): \"\"\"Simplifies the graph by reducing series and parallel resistors.\"\"\" series_connections, parallel_connections = find_series_parallel(graph) for edge1, edge2 in series_connections: R1 = graph[edge1[0]][edge1[1]]['resistance'] R2 = graph[edge2[0]][edge2[1]]['resistance'] new_R = series_reduction(R1, R2) # Replace the two resistors with the equivalent one graph.remove_edge(edge1[0], edge1[1]) graph.remove_edge(edge2[0], edge2[1]) # Add a new edge with resistance 'new_R' for edge1, edge2 in parallel_connections: R1 = graph[edge1[0]][edge1[1]]['resistance'] R2 = graph[edge2[0]][edge2[1]]['resistance'] new_R = parallel_reduction(R1, R2) # Replace the two resistors with the equivalent one graph.remove_edge(edge1[0], edge1[1]) graph.remove_edge(edge2[0], edge2[1]) # Add a new edge with resistance 'new_R' return graph def calculate_equivalent_resistance(graph): \"\"\"Calculates the total equivalent resistance of the circuit.\"\"\" while len(graph.edges) > 1: graph = simplify_graph(graph) # Final equivalent resistance return graph[graph.nodes[0]][graph.nodes[1]]['resistance'] # Example graph with resistors G = nx.Graph() G.add_edge(0, 1, resistance=5) G.add_edge(1, 2, resistance=10) print(f\"Equivalent resistance: {calculate_equivalent_resistance(G)} Ohms\")","title":"4. Python Implementation"},{"location":"1%20Physics/5%20Circuits/Problem_1/#5-analysis-and-efficiency","text":"","title":"5. Analysis and Efficiency"},{"location":"1%20Physics/5%20Circuits/Problem_1/#time-complexity","text":"The algorithm's complexity depends on the number of edges and nodes in the graph. Each simplification step involves searching for series and parallel connections, which is generally linear in terms of the number of edges. In the worst case, this could require \\(O(E^2)\\) for graph traversal.","title":"Time Complexity"},{"location":"1%20Physics/5%20Circuits/Problem_1/#space-complexity","text":"Space complexity is \\(O(V + E)\\) , where \\(V\\) is the number of vertices and \\(E\\) is the number of edges in the graph.","title":"Space Complexity"},{"location":"1%20Physics/5%20Circuits/Problem_1/#possible-improvements","text":"Optimized Search : Use more efficient graph traversal techniques to identify series and parallel connections faster. Parallel Processing : For larger graphs, parallelizing the search and simplification process could lead to performance improvements.","title":"Possible Improvements"},{"location":"1%20Physics/5%20Circuits/Problem_1/#6-conclusion","text":"This approach uses graph theory to simplify and calculate the equivalent resistance of electrical circuits. The algorithm iteratively reduces complex networks by identifying series and parallel resistor connections. This method is computationally efficient and extends well to more complex circuits with nested combinations. Future improvements could focus on optimizing the search process and enhancing scalability for larger circuits.","title":"6. Conclusion"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}