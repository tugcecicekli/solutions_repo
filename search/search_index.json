{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Derivation of the Equations of Motion Projectile motion can be broken down into horizontal and vertical components. The two key equations governing the motion are: Horizontal Motion (constant velocity): \\(x(t) = v_0 \\cos(\\theta) \\cdot t\\) Vertical Motion (under gravitational acceleration): \\(y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\\) Where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the angle of projection, - \\(g\\) is the gravitational acceleration, - \\(t\\) is the time. By solving the vertical motion equation for the time when the projectile returns to the ground, we can find the time of flight: \\(t_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\\) Using this in the horizontal motion equation, we find the range: \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] This equation represents the range of the projectile as a function of the initial velocity \\(v_0\\) , gravitational acceleration \\(g\\) , and launch angle \\(\\theta\\) . 1.2 Finding the Time of Flight The range \\(R\\) is the horizontal distance traveled by the projectile before it hits the ground. To find the time of flight, we solve the vertical motion equation for the time \\(t\\) when \\(y(t) = 0\\) (when the projectile returns to the ground). \\(0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\\) This gives: \\(t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0\\) The solutions are \\(t = 0\\) (initial launch time) and: \\(t_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\\) 1.3 Finding the Range The range \\(R\\) is the horizontal distance the projectile travels when it reaches the ground. Using the time of flight \\(t_{\\text{flight}}\\) in the horizontal motion equation: \\(R = v_0 \\cos(\\theta) \\cdot t_{\\text{flight}} = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) Simplifying: \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) Thus, the range is a function of the initial velocity \\(v_0\\) , the gravitational acceleration \\(g\\) , and the launch angle \\(\\theta\\) . 2. Analysis of the Range Range vs Angle of Projection The horizontal range \\(R\\) is a function of the launch angle \\(\\theta\\) . The range is maximized when \\(\\theta = 45^\\circ\\) , as this angle maximizes the value of \\(\\sin(2\\theta)\\) . Effect of Initial Velocity The range is proportional to the square of the initial velocity \\(v_0\\) . Doubling the initial velocity will increase the range by a factor of four. Effect of Gravitational Acceleration The range is inversely proportional to gravitational acceleration \\(g\\) . A higher value of \\(g\\) results in a shorter range. For example, the range on the Moon would be much greater than on Earth due to the lower gravitational acceleration. 3. Practical Applications Uneven Terrain In real-world situations, such as launching a projectile on uneven terrain, the initial and final heights may differ. To account for this, the vertical motion equation needs to be adjusted to incorporate the height difference between launch and landing. Air Resistance The idealized model assumes no air resistance. However, in reality, air resistance will slow the projectile down, affecting its trajectory and range. This requires more complex equations and numerical methods to model. Sports and Engineering Understanding projectile motion is crucial in sports like soccer, football, and basketball. Engineers also use projectile motion principles in launching projectiles and rockets. 4. Implementation https://colab.research.google.com/drive/1ituJ1v7ZvE1DFsCsE_xxTT5jaNQ_-kp1 5. Limitations of the Idealized Model The idealized model assumes: 1. No air resistance. 2. A flat surface for launch and landing. 3. Constant gravitational acceleration. Real-world conditions, such as air resistance, uneven terrain, and varying gravity, are not accounted for in this simple model. To improve the accuracy, air resistance and other factors must be included.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-the-equations-of-motion","text":"Projectile motion can be broken down into horizontal and vertical components. The two key equations governing the motion are: Horizontal Motion (constant velocity): \\(x(t) = v_0 \\cos(\\theta) \\cdot t\\) Vertical Motion (under gravitational acceleration): \\(y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\\) Where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the angle of projection, - \\(g\\) is the gravitational acceleration, - \\(t\\) is the time. By solving the vertical motion equation for the time when the projectile returns to the ground, we can find the time of flight: \\(t_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\\) Using this in the horizontal motion equation, we find the range: \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] This equation represents the range of the projectile as a function of the initial velocity \\(v_0\\) , gravitational acceleration \\(g\\) , and launch angle \\(\\theta\\) .","title":"Derivation of the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-finding-the-time-of-flight","text":"The range \\(R\\) is the horizontal distance traveled by the projectile before it hits the ground. To find the time of flight, we solve the vertical motion equation for the time \\(t\\) when \\(y(t) = 0\\) (when the projectile returns to the ground). \\(0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\\) This gives: \\(t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0\\) The solutions are \\(t = 0\\) (initial launch time) and: \\(t_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\\)","title":"1.2 Finding the Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-finding-the-range","text":"The range \\(R\\) is the horizontal distance the projectile travels when it reaches the ground. Using the time of flight \\(t_{\\text{flight}}\\) in the horizontal motion equation: \\(R = v_0 \\cos(\\theta) \\cdot t_{\\text{flight}} = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) Simplifying: \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) Thus, the range is a function of the initial velocity \\(v_0\\) , the gravitational acceleration \\(g\\) , and the launch angle \\(\\theta\\) .","title":"1.3 Finding the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-vs-angle-of-projection","text":"The horizontal range \\(R\\) is a function of the launch angle \\(\\theta\\) . The range is maximized when \\(\\theta = 45^\\circ\\) , as this angle maximizes the value of \\(\\sin(2\\theta)\\) .","title":"Range vs Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-initial-velocity","text":"The range is proportional to the square of the initial velocity \\(v_0\\) . Doubling the initial velocity will increase the range by a factor of four.","title":"Effect of Initial Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-gravitational-acceleration","text":"The range is inversely proportional to gravitational acceleration \\(g\\) . A higher value of \\(g\\) results in a shorter range. For example, the range on the Moon would be much greater than on Earth due to the lower gravitational acceleration.","title":"Effect of Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#uneven-terrain","text":"In real-world situations, such as launching a projectile on uneven terrain, the initial and final heights may differ. To account for this, the vertical motion equation needs to be adjusted to incorporate the height difference between launch and landing.","title":"Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#air-resistance","text":"The idealized model assumes no air resistance. However, in reality, air resistance will slow the projectile down, affecting its trajectory and range. This requires more complex equations and numerical methods to model.","title":"Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#sports-and-engineering","text":"Understanding projectile motion is crucial in sports like soccer, football, and basketball. Engineers also use projectile motion principles in launching projectiles and rockets.","title":"Sports and Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"https://colab.research.google.com/drive/1ituJ1v7ZvE1DFsCsE_xxTT5jaNQ_-kp1","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-of-the-idealized-model","text":"The idealized model assumes: 1. No air resistance. 2. A flat surface for launch and landing. 3. Constant gravitational acceleration. Real-world conditions, such as air resistance, uneven terrain, and varying gravity, are not accounted for in this simple model. To improve the accuracy, air resistance and other factors must be included.","title":"5. Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum (Summary) 1. Introduction The forced damped pendulum is a nonlinear system exhibiting behaviors like resonance, periodic motion, and chaos due to damping and external forcing. Understanding its dynamics is crucial for applications in engineering, energy harvesting, and structural stability . 2. Theoretical Background The equation of motion: \\(\\ddot{\\theta} + b\\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t)\\) - Damping \\((b)\\) controls energy loss. - Forcing \\((A, \\omega)\\) introduces external periodic energy, leading to resonance or chaotic motion. - For small angles \\((\\sin\\theta \\approx \\theta)\\) , the system behaves like a linear driven harmonic oscillator . 3. Numerical Simulation Since the equation is nonlinear, we use the Runge-Kutta method to solve it numerically. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters b = 0.2 # Damping coefficient A = 1.5 # Driving force amplitude omega = 2.0 # Driving frequency g = 9.81 # Gravity L = 1.0 # Pendulum length omega_0 = np.sqrt(g / L) # Differential equation for the forced damped pendulum def pendulum_eq(t, y): theta, omega_dot = y d_theta = omega_dot d_omega = -b * omega_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [d_theta, d_omega] # Time range and initial conditions t_span = (0, 50) t_eval = np.linspace(*t_span, 1000) y0 = [0.5, 0] # Initial angle and angular velocity # Solve the equation solution = solve_ivp(pendulum_eq, t_span, y0, t_eval=t_eval, method='RK45') # Plot results plt.figure(figsize=(10, 5)) plt.plot(solution.t, solution.y[0], label=r'$\\theta(t)$') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1mZ4tKUUQdA2M2ejXxRenjbDZ4mv9cX8s 4. Results and Discussion Periodic motion occurs for weak forcing. Resonance amplifies oscillations when \\(\\omega \\approx \\omega_0\\) . Chaos emerges for specific parameter combinations, observable in Poincar\u00e9 sections and phase portraits . 5. Practical Applications Energy Harvesting : Similar principles are used in vibration-based power generation. Mechanical Systems : Used in suspension bridges, oscillating circuits, and robotics . Electrical Analogies : Equivalent to driven RLC circuits in electronics. 6. Conclusion The forced damped pendulum exhibits diverse behaviors based on damping and forcing conditions. Numerical simulations reveal transitions from periodic to chaotic motion, with practical implications in engineering and physics .","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum-summary","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum (Summary)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-introduction","text":"The forced damped pendulum is a nonlinear system exhibiting behaviors like resonance, periodic motion, and chaos due to damping and external forcing. Understanding its dynamics is crucial for applications in engineering, energy harvesting, and structural stability .","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-theoretical-background","text":"The equation of motion: \\(\\ddot{\\theta} + b\\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t)\\) - Damping \\((b)\\) controls energy loss. - Forcing \\((A, \\omega)\\) introduces external periodic energy, leading to resonance or chaotic motion. - For small angles \\((\\sin\\theta \\approx \\theta)\\) , the system behaves like a linear driven harmonic oscillator .","title":"2. Theoretical Background"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-numerical-simulation","text":"Since the equation is nonlinear, we use the Runge-Kutta method to solve it numerically. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters b = 0.2 # Damping coefficient A = 1.5 # Driving force amplitude omega = 2.0 # Driving frequency g = 9.81 # Gravity L = 1.0 # Pendulum length omega_0 = np.sqrt(g / L) # Differential equation for the forced damped pendulum def pendulum_eq(t, y): theta, omega_dot = y d_theta = omega_dot d_omega = -b * omega_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [d_theta, d_omega] # Time range and initial conditions t_span = (0, 50) t_eval = np.linspace(*t_span, 1000) y0 = [0.5, 0] # Initial angle and angular velocity # Solve the equation solution = solve_ivp(pendulum_eq, t_span, y0, t_eval=t_eval, method='RK45') # Plot results plt.figure(figsize=(10, 5)) plt.plot(solution.t, solution.y[0], label=r'$\\theta(t)$') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1mZ4tKUUQdA2M2ejXxRenjbDZ4mv9cX8s","title":"3. Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-results-and-discussion","text":"Periodic motion occurs for weak forcing. Resonance amplifies oscillations when \\(\\omega \\approx \\omega_0\\) . Chaos emerges for specific parameter combinations, observable in Poincar\u00e9 sections and phase portraits .","title":"4. Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-practical-applications","text":"Energy Harvesting : Similar principles are used in vibration-based power generation. Mechanical Systems : Used in suspension bridges, oscillating circuits, and robotics . Electrical Analogies : Equivalent to driven RLC circuits in electronics.","title":"5. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-conclusion","text":"The forced damped pendulum exhibits diverse behaviors based on damping and forcing conditions. Numerical simulations reveal transitions from periodic to chaotic motion, with practical implications in engineering and physics .","title":"6. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius: Kepler\u2019s Third Law 1. Introduction Kepler\u2019s Third Law states that the square of the orbital period \\((T^2)\\) of a planet is proportional to the cube of its orbital radius \\((r^3)\\) . This fundamental law governs planetary and satellite motions, allowing astronomers to determine celestial body masses and distances. The relationship is essential for: - Predicting planetary motions in the solar system. - Designing satellite orbits for communications and space exploration. - Understanding gravitational interactions in astrophysics. 2. Theoretical Derivation For a small body orbiting a much larger central mass (e.g., a planet around the Sun), Newton\u2019s second law and the gravitational force equation yield: \\[F = \\frac{G M m}{r^2} = m \\frac{v^2}{r}\\] where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the central body, - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius, - \\(v\\) is the orbital velocity. For uniform circular motion , velocity is related to orbital period \\(T\\) : \\(v = \\frac{2\\pi r}{T}\\) \\(\\frac{G M m}{r^2} = m \\frac{(2\\pi r)^2}{T^2 r}\\) \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This confirms Kepler\u2019s Third Law : the square of the orbital period is proportional to the cube of the orbital radius . 3. Computational Simulation To verify Kepler\u2019s Law numerically, we simulate circular orbits for different radii and check the relationship between \\(T^2\\) and \\(r^3\\) . Python Simulation of Circular Orbits import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define constants M = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Function to compute orbital period using Kepler's Third Law def orbital_period(r): return 2 * np.pi * np.sqrt(r**3 / (G * M)) # Generate radii from 0.1 AU to 5 AU radii = np.linspace(0.1, 5, 10) * AU periods = np.array([orbital_period(r) for r in radii]) # Verify T^2 vs r^3 relationship T2 = periods**2 R3 = radii**3 # Plot results plt.figure(figsize=(8, 5)) plt.plot(R3, T2, 'o-', label=r'$T^2$ vs $r^3$') plt.xlabel(r'$r^3$ (m\u00b3)') plt.ylabel(r'$T^2$ (s\u00b2)') plt.title(\"Kepler's Third Law Verification\") plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1Gzs6NYgJDfira_n9CpCjV6JsMjYsQ-4I 4. Results and Discussion The plot of \\(T^2\\) vs. \\(r^3\\) shows a straight line, confirming Kepler\u2019s Third Law. This law enables astronomers to estimate planetary distances and star masses using observed orbital periods. For elliptical orbits , Kepler\u2019s Law applies using the semi-major axis instead of \\(r\\) . Real-World Applications Earth-Moon System : Predicting the Moon\u2019s motion around Earth. Exoplanet Discovery : Detecting distant planets via their orbital properties. Satellite Orbits : Designing stable GPS and communication satellite paths. 5. Conclusion Kepler\u2019s Third Law provides a fundamental link between orbital period and radius , governing celestial mechanics. Our computational verification confirms this proportionality, demonstrating its validity in planetary systems. Future studies can extend this analysis to elliptical orbits and multi-body gravitational interactions .","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-keplers-third-law","text":"","title":"Orbital Period and Orbital Radius: Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-introduction","text":"Kepler\u2019s Third Law states that the square of the orbital period \\((T^2)\\) of a planet is proportional to the cube of its orbital radius \\((r^3)\\) . This fundamental law governs planetary and satellite motions, allowing astronomers to determine celestial body masses and distances. The relationship is essential for: - Predicting planetary motions in the solar system. - Designing satellite orbits for communications and space exploration. - Understanding gravitational interactions in astrophysics.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-theoretical-derivation","text":"For a small body orbiting a much larger central mass (e.g., a planet around the Sun), Newton\u2019s second law and the gravitational force equation yield: \\[F = \\frac{G M m}{r^2} = m \\frac{v^2}{r}\\] where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the central body, - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius, - \\(v\\) is the orbital velocity. For uniform circular motion , velocity is related to orbital period \\(T\\) : \\(v = \\frac{2\\pi r}{T}\\) \\(\\frac{G M m}{r^2} = m \\frac{(2\\pi r)^2}{T^2 r}\\) \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This confirms Kepler\u2019s Third Law : the square of the orbital period is proportional to the cube of the orbital radius .","title":"2. Theoretical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-computational-simulation","text":"To verify Kepler\u2019s Law numerically, we simulate circular orbits for different radii and check the relationship between \\(T^2\\) and \\(r^3\\) .","title":"3. Computational Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation-of-circular-orbits","text":"import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define constants M = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Function to compute orbital period using Kepler's Third Law def orbital_period(r): return 2 * np.pi * np.sqrt(r**3 / (G * M)) # Generate radii from 0.1 AU to 5 AU radii = np.linspace(0.1, 5, 10) * AU periods = np.array([orbital_period(r) for r in radii]) # Verify T^2 vs r^3 relationship T2 = periods**2 R3 = radii**3 # Plot results plt.figure(figsize=(8, 5)) plt.plot(R3, T2, 'o-', label=r'$T^2$ vs $r^3$') plt.xlabel(r'$r^3$ (m\u00b3)') plt.ylabel(r'$T^2$ (s\u00b2)') plt.title(\"Kepler's Third Law Verification\") plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1Gzs6NYgJDfira_n9CpCjV6JsMjYsQ-4I","title":"Python Simulation of Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-results-and-discussion","text":"The plot of \\(T^2\\) vs. \\(r^3\\) shows a straight line, confirming Kepler\u2019s Third Law. This law enables astronomers to estimate planetary distances and star masses using observed orbital periods. For elliptical orbits , Kepler\u2019s Law applies using the semi-major axis instead of \\(r\\) .","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-applications","text":"Earth-Moon System : Predicting the Moon\u2019s motion around Earth. Exoplanet Discovery : Detecting distant planets via their orbital properties. Satellite Orbits : Designing stable GPS and communication satellite paths.","title":"Real-World Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-conclusion","text":"Kepler\u2019s Third Law provides a fundamental link between orbital period and radius , governing celestial mechanics. Our computational verification confirms this proportionality, demonstrating its validity in planetary systems. Future studies can extend this analysis to elliptical orbits and multi-body gravitational interactions .","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities 1. Introduction Escape velocity is the minimum speed an object needs to break free from a celestial body's gravitational pull without further propulsion. This concept extends to cosmic velocities , which define thresholds for orbiting, escaping, and leaving a star system. These principles are fundamental in space exploration , affecting satellite launches, interplanetary travel, and potential interstellar missions. Cosmic Velocities: First Cosmic Velocity \\((v_1)\\) : Orbital velocity for a stable circular orbit. Second Cosmic Velocity \\((v_2)\\) : Escape velocity to leave a planet\u2019s gravity. Third Cosmic Velocity \\((v_3)\\) : Velocity needed to escape the Sun\u2019s gravity from a planet. 2. Theoretical Background 2.1 First Cosmic Velocity (Orbital Velocity) For an object to stay in a circular orbit around a planet of mass \\(M\\) and radius \\(R\\) , its centripetal force must equal gravitational force: \\[\\frac{G M m}{R^2} = m \\frac{v_1^2}{R}\\] Solving for \\(v_1\\) : \\[v_1 = \\sqrt{\\frac{G M}{R}}\\] 2.2 Second Cosmic Velocity (Escape Velocity) The escape velocity is found by equating kinetic energy to gravitational potential energy: \\[\\frac{1}{2} m v_2^2 = \\frac{G M m}{R}\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{R}}\\] 2.3 Third Cosmic Velocity (Interstellar Escape) To leave the solar system, an object must overcome both Earth's and the Sun's gravity. The required velocity is: \\[v_3 = \\sqrt{v_2^2 + v_{\\text{escape,Sun}}^2}\\] where \\(v_{\\text{escape,Sun}}\\) is the escape velocity from the Sun at Earth\u2019s orbit. 3. Computational Simulation We compute these velocities for Earth, Mars, and Jupiter using Python. import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define celestial bodies (Mass in kg, Radius in meters) bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.389e6), \"Jupiter\": (1.898e27, 6.9911e7) } # Compute first, second, and third cosmic velocities def compute_velocities(M, R): v1 = np.sqrt(G * M / R) # First cosmic velocity (Orbital) v2 = np.sqrt(2 * G * M / R) # Second cosmic velocity (Escape) return v1, v2 # Store results results = {body: compute_velocities(M, R) for body, (M, R) in bodies.items()} # Plot results labels = [\"First Cosmic Velocity (km/s)\", \"Second Cosmic Velocity (km/s)\"] colors = ['blue', 'red'] x = np.arange(len(bodies)) plt.figure(figsize=(8, 5)) for i in range(2): plt.bar(x + i * 0.3, [results[body][i] / 1e3 for body in bodies], width=0.3, label=labels[i], color=colors[i]) plt.xticks(x + 0.15, bodies.keys()) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1ZKQKWnH0bVhEBpNgUawo7nmMMx6MW80Y 4. Results and Discussion Earth: \\(v_1 \\approx 7.91\\) km/s (orbital) \\(v_2 \\approx 11.19\\) km/s (escape) Mars: Lower due to weaker gravity ( \\(v_1 \\approx 3.55\\) km/s, $v_2 \\approx 5.03 $ km/s) Jupiter: Higher due to stronger gravity ( \\(v_1 \\approx 42.1\\) km/s, \\(v_2 \\approx 59.5\\) km/s) Importance in Space Exploration Satellites & Space Stations require first cosmic velocity to remain in orbit. Missions to the Moon & Mars need escape velocity to leave Earth. Interstellar Missions (e.g., Voyager probes) need third cosmic velocity to leave the solar system. 5. Conclusion This report derived and computed cosmic velocities for Earth, Mars, and Jupiter, demonstrating their importance in space missions. The Python simulation confirmed the theoretical values, showing how gravitational differences impact space travel. Future work can explore atmospheric drag, multi-body interactions, and advanced propulsion methods for interstellar exploration.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-introduction","text":"Escape velocity is the minimum speed an object needs to break free from a celestial body's gravitational pull without further propulsion. This concept extends to cosmic velocities , which define thresholds for orbiting, escaping, and leaving a star system. These principles are fundamental in space exploration , affecting satellite launches, interplanetary travel, and potential interstellar missions.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities","text":"First Cosmic Velocity \\((v_1)\\) : Orbital velocity for a stable circular orbit. Second Cosmic Velocity \\((v_2)\\) : Escape velocity to leave a planet\u2019s gravity. Third Cosmic Velocity \\((v_3)\\) : Velocity needed to escape the Sun\u2019s gravity from a planet.","title":"Cosmic Velocities:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-theoretical-background","text":"","title":"2. Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-first-cosmic-velocity-orbital-velocity","text":"For an object to stay in a circular orbit around a planet of mass \\(M\\) and radius \\(R\\) , its centripetal force must equal gravitational force: \\[\\frac{G M m}{R^2} = m \\frac{v_1^2}{R}\\] Solving for \\(v_1\\) : \\[v_1 = \\sqrt{\\frac{G M}{R}}\\]","title":"2.1 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-second-cosmic-velocity-escape-velocity","text":"The escape velocity is found by equating kinetic energy to gravitational potential energy: \\[\\frac{1}{2} m v_2^2 = \\frac{G M m}{R}\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{R}}\\]","title":"2.2 Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#23-third-cosmic-velocity-interstellar-escape","text":"To leave the solar system, an object must overcome both Earth's and the Sun's gravity. The required velocity is: \\[v_3 = \\sqrt{v_2^2 + v_{\\text{escape,Sun}}^2}\\] where \\(v_{\\text{escape,Sun}}\\) is the escape velocity from the Sun at Earth\u2019s orbit.","title":"2.3 Third Cosmic Velocity (Interstellar Escape)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-computational-simulation","text":"We compute these velocities for Earth, Mars, and Jupiter using Python. import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Define celestial bodies (Mass in kg, Radius in meters) bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.389e6), \"Jupiter\": (1.898e27, 6.9911e7) } # Compute first, second, and third cosmic velocities def compute_velocities(M, R): v1 = np.sqrt(G * M / R) # First cosmic velocity (Orbital) v2 = np.sqrt(2 * G * M / R) # Second cosmic velocity (Escape) return v1, v2 # Store results results = {body: compute_velocities(M, R) for body, (M, R) in bodies.items()} # Plot results labels = [\"First Cosmic Velocity (km/s)\", \"Second Cosmic Velocity (km/s)\"] colors = ['blue', 'red'] x = np.arange(len(bodies)) plt.figure(figsize=(8, 5)) for i in range(2): plt.bar(x + i * 0.3, [results[body][i] / 1e3 for body in bodies], width=0.3, label=labels[i], color=colors[i]) plt.xticks(x + 0.15, bodies.keys()) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid() plt.show() https://colab.research.google.com/drive/1ZKQKWnH0bVhEBpNgUawo7nmMMx6MW80Y","title":"3. Computational Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-results-and-discussion","text":"Earth: \\(v_1 \\approx 7.91\\) km/s (orbital) \\(v_2 \\approx 11.19\\) km/s (escape) Mars: Lower due to weaker gravity ( \\(v_1 \\approx 3.55\\) km/s, $v_2 \\approx 5.03 $ km/s) Jupiter: Higher due to stronger gravity ( \\(v_1 \\approx 42.1\\) km/s, \\(v_2 \\approx 59.5\\) km/s)","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#importance-in-space-exploration","text":"Satellites & Space Stations require first cosmic velocity to remain in orbit. Missions to the Moon & Mars need escape velocity to leave Earth. Interstellar Missions (e.g., Voyager probes) need third cosmic velocity to leave the solar system.","title":"Importance in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-conclusion","text":"This report derived and computed cosmic velocities for Earth, Mars, and Jupiter, demonstrating their importance in space missions. The Python simulation confirmed the theoretical values, showing how gravitational differences impact space travel. Future work can explore atmospheric drag, multi-body interactions, and advanced propulsion methods for interstellar exploration.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth 1. Introduction When a payload is released from a moving rocket near Earth, its motion depends on initial velocity, altitude, and gravitational forces . Understanding these trajectories is essential for orbital insertion, reentry planning, and satellite deployment . The possible paths include: - Elliptical orbits (if velocity is below escape velocity). - Parabolic trajectories (if velocity equals escape velocity). - Hyperbolic escape paths (if velocity exceeds escape velocity). - Suborbital trajectories (if reentry occurs). 2. Theoretical Background 2.1 Governing Equations Using Newton\u2019s Second Law and Universal Gravitation, the equation of motion for a payload influenced only by Earth\u2019s gravity is: \\[\\mathbf{F} = m \\mathbf{a} = -\\frac{G M m}{r^2} \\hat{r}\\] which leads to the gravitational acceleration : \\[\\mathbf{a} = -\\frac{G M}{r^2} \\hat{r}\\] where: - \\(G = 6.674 \\times 10^{-11}\\) m\u00b3/kg/s\u00b2 (gravitational constant). - \\(M = 5.972 \\times 10^{24}\\) kg (mass of Earth). - \\(r\\) is the payload\u2019s radial distance from Earth\u2019s center. For different initial velocities \\(( v_0)\\) at release altitude \\(r_0\\) : - If \\(v_0 < v_1\\) (orbital velocity): Suborbital reentry . - If \\(v_0 = v_1\\) : Circular orbit . - If \\(v_1 < v_0 < v_2\\) (escape velocity): Elliptical orbit . - If \\(v_0 = v_2\\) : Parabolic escape . - If \\(v_0 > v_2\\) : Hyperbolic escape . 3. Numerical Simulation We simulate a payload's trajectory using Runge-Kutta methods to solve the equation of motion in two dimensions. Python Implementation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp from scipy.constants import G # Define Earth parameters M_earth = 5.972e24 # kg R_earth = 6.371e6 # meters # Define the equations of motion def equations(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M_earth * x / r**3 ay = -G * M_earth * y / r**3 return [vx, vy, ax, ay] # Initial conditions: Release altitude and velocity altitude = 400e3 # 400 km above Earth r0 = R_earth + altitude v0_values = [6.8e3, 7.9e3, 11.2e3] # Below, at, and above orbital velocity (m/s) # Time span t_span = (0, 5000) t_eval = np.linspace(*t_span, 1000) # Simulate and plot different cases plt.figure(figsize=(7, 7)) for v0 in v0_values: initial_state = [r0, 0, 0, v0] # (x0, y0, vx0, vy0) sol = solve_ivp(equations, t_span, initial_state, t_eval=t_eval, method='RK45') plt.plot(sol.y[0], sol.y[1], label=f'v0 = {v0 / 1e3:.1f} km/s') # Plot Earth theta = np.linspace(0, 2*np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k', label='Earth') plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.title(\"Payload Trajectories Near Earth\") plt.legend() plt.grid() plt.axis('equal') plt.show() https://colab.research.google.com/drive/1tmNx00N0d6ZO2M9a7sIeov0q_ArNJI7H 4. Results and Discussion Suborbital (e.g., \\( v_0 = 6.8 \\) km/s) : The payload follows a curved trajectory but falls back to Earth. Orbital Insertion (e.g., \\( v_0 = 7.9 \\) km/s) : The payload enters a stable circular orbit. Escape Trajectory (e.g., \\( v_0 = 11.2 \\) km/s) : The payload follows a hyperbolic path, escaping Earth's gravity. Real-World Applications Satellite Deployment : Space agencies use precise velocity control to achieve stable orbits. Reentry Planning : Spacecraft must control velocity for safe reentry (e.g., ISS, capsules). Interplanetary Travel : Higher velocity payloads can escape Earth and travel to Mars or beyond. 5. Conclusion This report analyzed the trajectories of a freely released payload using theoretical equations and numerical simulations . The results confirm how initial velocity dictates whether a payload reenters, orbits, or escapes . This understanding is fundamental in space mission planning, satellite deployment, and interplanetary travel . Future extensions could include atmospheric drag effects, three-body interactions, or maneuvering thruster effects .","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-introduction","text":"When a payload is released from a moving rocket near Earth, its motion depends on initial velocity, altitude, and gravitational forces . Understanding these trajectories is essential for orbital insertion, reentry planning, and satellite deployment . The possible paths include: - Elliptical orbits (if velocity is below escape velocity). - Parabolic trajectories (if velocity equals escape velocity). - Hyperbolic escape paths (if velocity exceeds escape velocity). - Suborbital trajectories (if reentry occurs).","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-theoretical-background","text":"","title":"2. Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#21-governing-equations","text":"Using Newton\u2019s Second Law and Universal Gravitation, the equation of motion for a payload influenced only by Earth\u2019s gravity is: \\[\\mathbf{F} = m \\mathbf{a} = -\\frac{G M m}{r^2} \\hat{r}\\] which leads to the gravitational acceleration : \\[\\mathbf{a} = -\\frac{G M}{r^2} \\hat{r}\\] where: - \\(G = 6.674 \\times 10^{-11}\\) m\u00b3/kg/s\u00b2 (gravitational constant). - \\(M = 5.972 \\times 10^{24}\\) kg (mass of Earth). - \\(r\\) is the payload\u2019s radial distance from Earth\u2019s center. For different initial velocities \\(( v_0)\\) at release altitude \\(r_0\\) : - If \\(v_0 < v_1\\) (orbital velocity): Suborbital reentry . - If \\(v_0 = v_1\\) : Circular orbit . - If \\(v_1 < v_0 < v_2\\) (escape velocity): Elliptical orbit . - If \\(v_0 = v_2\\) : Parabolic escape . - If \\(v_0 > v_2\\) : Hyperbolic escape .","title":"2.1 Governing Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-numerical-simulation","text":"We simulate a payload's trajectory using Runge-Kutta methods to solve the equation of motion in two dimensions.","title":"3. Numerical Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-implementation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp from scipy.constants import G # Define Earth parameters M_earth = 5.972e24 # kg R_earth = 6.371e6 # meters # Define the equations of motion def equations(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M_earth * x / r**3 ay = -G * M_earth * y / r**3 return [vx, vy, ax, ay] # Initial conditions: Release altitude and velocity altitude = 400e3 # 400 km above Earth r0 = R_earth + altitude v0_values = [6.8e3, 7.9e3, 11.2e3] # Below, at, and above orbital velocity (m/s) # Time span t_span = (0, 5000) t_eval = np.linspace(*t_span, 1000) # Simulate and plot different cases plt.figure(figsize=(7, 7)) for v0 in v0_values: initial_state = [r0, 0, 0, v0] # (x0, y0, vx0, vy0) sol = solve_ivp(equations, t_span, initial_state, t_eval=t_eval, method='RK45') plt.plot(sol.y[0], sol.y[1], label=f'v0 = {v0 / 1e3:.1f} km/s') # Plot Earth theta = np.linspace(0, 2*np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k', label='Earth') plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.title(\"Payload Trajectories Near Earth\") plt.legend() plt.grid() plt.axis('equal') plt.show() https://colab.research.google.com/drive/1tmNx00N0d6ZO2M9a7sIeov0q_ArNJI7H","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-results-and-discussion","text":"Suborbital (e.g., \\( v_0 = 6.8 \\) km/s) : The payload follows a curved trajectory but falls back to Earth. Orbital Insertion (e.g., \\( v_0 = 7.9 \\) km/s) : The payload enters a stable circular orbit. Escape Trajectory (e.g., \\( v_0 = 11.2 \\) km/s) : The payload follows a hyperbolic path, escaping Earth's gravity.","title":"4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#real-world-applications","text":"Satellite Deployment : Space agencies use precise velocity control to achieve stable orbits. Reentry Planning : Spacecraft must control velocity for safe reentry (e.g., ISS, capsules). Interplanetary Travel : Higher velocity payloads can escape Earth and travel to Mars or beyond.","title":"Real-World Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-conclusion","text":"This report analyzed the trajectories of a freely released payload using theoretical equations and numerical simulations . The results confirm how initial velocity dictates whether a payload reenters, orbits, or escapes . This understanding is fundamental in space mission planning, satellite deployment, and interplanetary travel . Future extensions could include atmospheric drag effects, three-body interactions, or maneuvering thruster effects .","title":"5. Conclusion"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}